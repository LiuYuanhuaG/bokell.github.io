<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一篇搞懂 Webpack 常用的API (1)</title>
    <url>/eternallycyf/%E4%B8%80%E7%AF%87%E6%90%9E%E6%87%82%20Webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84API%20(1)/</url>
    <content><![CDATA[<h2 id="1-认识-Webpack"><a href="#1-认识-Webpack" class="headerlink" title="1.认识 Webpack"></a>1.认识 Webpack</h2><h3 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么?"></a>Webpack 是什么?</h3><ul>
<li><a href="https://webpack.docschina.org/concepts/">官方的定义</a><ul>
<li><code>Webpack</code> 是一个用于现代 <code>JavaScript</code> 应用程序的 静态模块打包工具。</li>
<li>当<code>Webpack</code> 处理应用程序时，</li>
<li>它会在内部从一个或多个入口点构建一个 依赖图(<code>dependency graph</code>)</li>
<li>然后将你项目中所需的每一个模块组合成一个或多个 <code>bundles</code>，它们均为静态资源，用于展示你的内容</li>
</ul>
</li>
<li>简单的说<ul>
<li>之前<ul>
<li>在<code>2010</code>年左右,前端当时还是利用 <code>jQuery</code> 进行开发</li>
<li>后端利用 <code>php jsp</code> 等技术将数据库的数据渲染到前端的页面上</li>
<li>前后端开始是耦合的 维护和开发 都是一个不规范 繁琐的流程</li>
</ul>
</li>
<li>现在<ul>
<li>当三大框架的横行后 逐渐以<code>MVVM</code>(<code>Model-View-ViewModel</code>)模式来 </li>
<li>减少繁琐的 <code>DOM</code> 操作,以数据来驱动视图的变化,更加利于维护和开发</li>
</ul>
</li>
<li>为什么使用<ul>
<li>原生<code>js</code>不会提供所有的特性, 因此就需要引入各种插件</li>
<li>而<code>Webpack</code>就是大一统的集成方案</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Webpack-可以做什么"><a href="#Webpack-可以做什么" class="headerlink" title="Webpack 可以做什么"></a>Webpack 可以做什么</h3><ul>
<li>使用<code>Webpack</code>作为前端构建工具通常可以做到以下几个方面的事情<ul>
<li>代码转换: <code>TypeScript</code>编译成<code>JavaScript</code>、<code>SCSS</code>编译成<code>CSS</code>等。</li>
<li>文件优化: 压缩<code>JavaScript</code>、<code>CSS</code>、<code>HTML</code>代码，压缩合并图片等。</li>
<li>代码分割: 提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>
<li>模块合并: 在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>
<li>自动刷新: 监听本地源代码的变化，自动重新构建、刷新浏览器页面，通常叫做模块热替换<code>HMR</code>。</li>
<li>代码校验: 在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>
<li>自动发布: 更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>
</ul>
</li>
</ul>
<h2 id="2-搭建-Webpack"><a href="#2-搭建-Webpack" class="headerlink" title="2.搭建 Webpack"></a>2.搭建 Webpack</h2><h3 id="搭建基本环境"><a href="#搭建基本环境" class="headerlink" title="搭建基本环境"></a>搭建基本环境</h3><ul>
<li>安装最新的环境, 新建一个文件夹叫 <code>test</code></li>
<li><code>test</code> 根路径下载基本的依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli --save-dev</span><br><span class="line">yarn add webpack-dev-server -D</span><br><span class="line">yarn add html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li>
<li>在 <code>test/package.json</code> 文件添加启动和打包的 <code>shell</code> 命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;webpack serve &quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li>新建基本的文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># dist 目录不用手动创建 这个是打包自动生成的</span><br><span class="line">|-- node_modules</span><br><span class="line">├── dist</span><br><span class="line">│   └── main.js</span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── index.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure></li>
<li>在 webpack.config.js 文件写入基本的配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 这些配置后面会具体解释 这里主要配置了打包的出口文件和入口文件</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>此时就完成了基本的搭建,可以来使用shell语句测试一下效果了</blockquote>

<ul>
<li>在 <code>/src/index.js</code> 写入 <code>console.log(&#39;Hello Webpck&#39;);</code></li>
<li>然后在项目根路径执行之前在<code>package.json</code>定义的<code>shell</code>命令 </li>
<li><code>yarn build</code> 就在在 <code>/dist/main.js</code> 发现转换后的代码了</li>
<li>但是目前还是不能展示html页面 和 启动服务</li>
<li>在下一阶段就将安装两个必要的插件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello Webpck&#x27;);\n\n//# sourceURL=webpack:///./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	__webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>]();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><ul>
<li>这个插件其实就是一个小型的本地服务器 </li>
<li>相关配置也比较简单</li>
<li>其他的具体配置后面再说 </li>
<li>这时候就可以执行 <code>yarn serve</code></li>
<li>此时还没有配置解析html的插件 因此先手动跳转到 <code>main.js</code> 测试下</li>
<li><code>http://localhost:8088/main.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 打开的端口</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="comment">// 启动服务后自动打开网页</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><ul>
<li>这个包显然就是用来解析html的</li>
<li>配置后运行 <code>yarn build</code> 就可以在 <code>dist</code> 目录看到打包后的 <code>index.html</code> 了</li>
<li>同时运行 <code>yarn serve</code> 也可以直接运行解析了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"># 在 ./public/index.html 随便写点东西</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 要生成的index.html路径 </span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>此时我们完成了基本的架构,现在需要配置各种loader来满足项目的需要</blockquote>
### Asset Modules </li>
<li><code>Asset Modules</code> 是一种模块，它允许人们在不配置额外加载器的情况下使用资产文件（字体、图标等）</li>
<li><code>webpack5</code> 不需要再去手动下载三个<code>loader</code>了</li>
<li>在 <code>webpack 5</code> 之前，通常使用:<ul>
<li><code>raw-loader</code>将文件作为字符串导入</li>
<li><code>url-loader</code>将文件作为数据 URI 内联到包中</li>
<li><code>file-loader</code>将文件发送到输出目录</li>
</ul>
</li>
<li>当配置完成后运行 yarn build就会发现 图片也被打包进了dist目录<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在 ./public 放一张图片 这里选择了avatar.png</span><br><span class="line"># ./src/index.js </span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;../public/avatar.png&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpck&#x27;</span>);</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.use</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定输出的文件夹</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;public/assets/images/[hash][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        <span class="comment">// 所有这些文件将将作为数据 URI 注入到包中</span></span><br><span class="line">        type: <span class="string">&#x27;asset/inline&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        <span class="comment">// .txt文件都将按原样注入到包中</span></span><br><span class="line">        type: <span class="string">&#x27;asset/source&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3>]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
</search>
