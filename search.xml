<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>平凡之路</title>
    <url>/eternallycyf/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="雪泥鸿爪"><a href="#雪泥鸿爪" class="headerlink" title="雪泥鸿爪"></a>雪泥鸿爪</h2><h3 id="Long-Long-Ago"><a href="#Long-Long-Ago" class="headerlink" title="Long-Long-Ago"></a>Long-Long-Ago</h3><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>Long-Long-Ago</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>PS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>AE</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>HTML</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>CSS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>JavaScript</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>Git</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>MarkDown</p>
</div></div></div>

<h3 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h3><div class="timeline cornflowerblue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2020</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-10</p>
</div></div><div class='timeline-item-content'><p>Hexo</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-10</p>
</div></div><div class='timeline-item-content'><p>搭建博客</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-14</p>
</div></div><div class='timeline-item-content'><p>HTML5</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-15</p>
</div></div><div class='timeline-item-content'><p>CSS3</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-16</p>
</div></div><div class='timeline-item-content'><p>Flex布局</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>04-20</p>
</div></div><div class='timeline-item-content'><p>ES6</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-01</p>
</div></div><div class='timeline-item-content'><p>jQuery</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-05</p>
</div></div><div class='timeline-item-content'><p>Ajax</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-15</p>
</div></div><div class='timeline-item-content'><p>Axios</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-12</p>
</div></div><div class='timeline-item-content'><p>canvas</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-17</p>
</div></div><div class='timeline-item-content'><p>svg</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-23</p>
</div></div><div class='timeline-item-content'><p>bootStrap</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-25</p>
</div></div><div class='timeline-item-content'><p>less</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-26</p>
</div></div><div class='timeline-item-content'><p>PostCSS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-01</p>
</div></div><div class='timeline-item-content'><p>NPM</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-05</p>
</div></div><div class='timeline-item-content'><p>YARN</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-05</p>
</div></div><div class='timeline-item-content'><p>Babel</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-05</p>
</div></div><div class='timeline-item-content'><p>NodeJS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-12</p>
</div></div><div class='timeline-item-content'><p>Mysql</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-18</p>
</div></div><div class='timeline-item-content'><p>PHP</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-23</p>
</div></div><div class='timeline-item-content'><p>Apache</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-23</p>
</div></div><div class='timeline-item-content'><p>MACOS操作系统</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-19</p>
</div></div><div class='timeline-item-content'><p>Express</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-25</p>
</div></div><div class='timeline-item-content'><p>PostgreSQL</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-06</p>
</div></div><div class='timeline-item-content'><p>MongoDB</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-22</p>
</div></div><div class='timeline-item-content'><p>Redis</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-27</p>
</div></div><div class='timeline-item-content'><p>Redis</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-15</p>
</div></div><div class='timeline-item-content'><p>gulp</p>
</div></div></div>

<h3 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h3><div class="timeline green"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2021</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-07</p>
</div></div><div class='timeline-item-content'><p>Vue</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-03</p>
</div></div><div class='timeline-item-content'><p>VueX</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-05</p>
</div></div><div class='timeline-item-content'><p>Vue Router</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-10</p>
</div></div><div class='timeline-item-content'><p>Webpack</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-07</p>
</div></div><div class='timeline-item-content'><p>NuxtJS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-11</p>
</div></div><div class='timeline-item-content'><p>微信小程序</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-15</p>
</div></div><div class='timeline-item-content'><p>UniApp</p>
</div></div></div>

<div class="timeline purple"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2021</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-01</p>
</div></div><div class='timeline-item-content'><p>React</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-12</p>
</div></div><div class='timeline-item-content'><p>React Router</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-15</p>
</div></div><div class='timeline-item-content'><p>React Hooks</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-20</p>
</div></div><div class='timeline-item-content'><p>TypeScript</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-24</p>
</div></div><div class='timeline-item-content'><p>NextJS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-26</p>
</div></div><div class='timeline-item-content'><p>SASS</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>06-27</p>
</div></div><div class='timeline-item-content'><p>Jest</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-03</p>
</div></div><div class='timeline-item-content'><p>写一个组件库(模仿antd)</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-11</p>
</div></div><div class='timeline-item-content'><p>Taro</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-14</p>
</div></div><div class='timeline-item-content'><p>Vuepress</p>
</div></div></div>

<div class="timeline orange"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2021</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>08-27</p>
</div></div><div class='timeline-item-content'><p>Redux</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-01</p>
</div></div><div class='timeline-item-content'><p>Dva</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-03</p>
</div></div><div class='timeline-item-content'><p>Umi</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-05</p>
</div></div><div class='timeline-item-content'><p>Stylus</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-07</p>
</div></div><div class='timeline-item-content'><p>Lottie</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-08</p>
</div></div><div class='timeline-item-content'><p>linux</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-09</p>
</div></div><div class='timeline-item-content'><p>nginx</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-10</p>
</div></div><div class='timeline-item-content'><p>docker </p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-17</p>
</div></div><div class='timeline-item-content'><p>买服务器</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-18</p>
</div></div><div class='timeline-item-content'><p>CICD</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>09-22</p>
</div></div><div class='timeline-item-content'><p>自己搭建一个gitlab</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-08</p>
</div></div><div class='timeline-item-content'><p>Grid布局</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-12</p>
</div></div><div class='timeline-item-content'><p>自己写一个vscode插件</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-17</p>
</div></div><div class='timeline-item-content'><p>自己搭建一个脚手架</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-20</p>
</div></div><div class='timeline-item-content'><p>Vite</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-21</p>
</div></div><div class='timeline-item-content'><p>Vue 3.0</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>11-11</p>
</div></div><div class='timeline-item-content'><p>ReactNative</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>12-02</p>
</div></div><div class='timeline-item-content'><p>Axios源码解析</p>
</div></div></div>

<h3 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h3><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-12</p>
</div></div><div class='timeline-item-content'><p>JAVA基础</p>
</div></div></div>

<h2 id="心无旁骛"><a href="#心无旁骛" class="headerlink" title="心无旁骛"></a>心无旁骛</h2><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>ThisYear</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>webpack 写一个插件</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>K8S</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>LeeCode</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>Redux源码解析</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>JS设计模式</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>Vue源码解析</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>React源码解析</p>
</div></div></div>


<h2 id="来日方长"><a href="#来日方长" class="headerlink" title="来日方长"></a>来日方长</h2><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>Future</p>
</div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>Electron</p>
</div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'></div></div><div class='timeline-item-content'><p>python3</p>
</div></div></div>]]></content>
      <categories>
        <category>life</category>
      </categories>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>手写axios</title>
    <url>/eternallycyf/%E6%89%8B%E5%86%99axios/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这里主要实现了 <ul>
<li>构建<code>axios</code>对象和函数</li>
<li>发送网络请求:<code>ajax</code></li>
<li>拦截器</li>
<li>适配器</li>
<li><code>CancolToken</code>功能</li>
</ul>
</li>
</ul>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><ul>
<li>这里直接使用<code>esmodule</code>, 需要注意<code>import</code>时候不能省略 <code>.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span> 发送请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./index.js&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// fetch(&#x27;./db.json&#x27;).then(async (res) =&gt; console.log(await res.json()))</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.request.use(<span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">config</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> config;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    axios.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> response;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">console</span>.log(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (cancel !== <span class="literal">null</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> cancelToken = <span class="keyword">new</span> axios.CancelToken(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123; cancel = c &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">// url: &#x27;./db.json&#x27;,</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">cancelToken</span>: cancelToken</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        cancel = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log(response.data);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><ul>
<li>导出构造函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./Axios.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Axios-js"><a href="#Axios-js" class="headerlink" title="Axios.js"></a>Axios.js</h3><ul>
<li>构建了<code>Axios</code>的类,并创造了他的实例对象</li>
<li>此时就可以 <code>axios.get</code> or <code>axios(&#123;method:&quot;GET&quot;&#125;)</code> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; request &#125; <span class="keyword">from</span> <span class="string">&#x27;./request.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; CancelToken &#125; <span class="keyword">from</span> <span class="string">&#x27;./CancelToken.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; InterceptorManager &#125; <span class="keyword">from</span> <span class="string">&#x27;./interceptor.js&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Axios</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.defaults = config;</span><br><span class="line">    <span class="built_in">this</span>.interceptors = &#123;</span><br><span class="line">      <span class="attr">request</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">      <span class="attr">response</span>: <span class="keyword">new</span> InterceptorManager(),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">request</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> request.call(<span class="built_in">this</span>, config)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">get</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">post</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.request(&#123; <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> context = <span class="keyword">new</span> Axios(config);</span><br><span class="line">  <span class="keyword">let</span> instance = Axios.prototype.request.bind(context);</span><br><span class="line">  <span class="keyword">let</span> functionNamesArray = <span class="built_in">Object</span>.getOwnPropertyNames(Axios.prototype)</span><br><span class="line">  functionNamesArray.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    instance[item] = Axios.prototype[item].bind(context)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">Object</span>.keys(context).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    instance[key] = context[key];</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> instance</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> axios = createInstance()</span><br><span class="line">axios.CancelToken = CancelToken</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> axios</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="dispatchRequest-js"><a href="#dispatchRequest-js" class="headerlink" title="dispatchRequest.js"></a>dispatchRequest.js</h3><ul>
<li>这里用于调用适配器<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; xhrAdapter &#125; <span class="keyword">from</span> <span class="string">&#x27;./xhrAdapter.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatchRequest</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> xhrAdapter(config).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="xhrAdapter-js"><a href="#xhrAdapter-js" class="headerlink" title="xhrAdapter.js"></a>xhrAdapter.js</h3><ul>
<li>适配器:用于切换使用 <code>node</code> 版本还是 <code>js</code> 版本</li>
<li>这里指写了 <code>js</code> 版本<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(config.method, config.url);</span><br><span class="line">    xhr.send();</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">          resolve(&#123;</span><br><span class="line">            <span class="attr">config</span>: config,</span><br><span class="line">            <span class="attr">data</span>: xhr.responseText,</span><br><span class="line">            <span class="attr">headers</span>: xhr.getAllResponseHeaders(),</span><br><span class="line">            <span class="attr">request</span>: xhr,</span><br><span class="line">            <span class="attr">status</span>: xhr.status,</span><br><span class="line">            <span class="attr">statusText</span>: xhr.statusText</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求失败 失败的状态码为&#x27;</span> + xhr.status));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">      config.cancelToken.promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">        xhr.abort();</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;请求已经被取消&#x27;</span>))</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="interceptor-js"><a href="#interceptor-js" class="headerlink" title="interceptor.js"></a>interceptor.js</h3><ul>
<li>拦截器的实例对象<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorManager</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">use</span>(<span class="params">fulfilled, rejected</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.handlers.push(&#123; fulfilled, rejected &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h3><ul>
<li>这里是关于拦截器的核心代码</li>
<li>可以看出是用一个数组维护 响应拦截器 和 请求拦截器</li>
<li>放的时候 请求拦截器 <code>unshift</code> , 相应拦截器 <code>push</code></li>
<li>取的时候 请求拦截器 <code>shift</code> , 相应拦截器 <code>shift</code></li>
<li>因此当多个拦截器执行的时候 请求拦截器的顺序是反的 相应拦截器的正的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; dispatchRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;./dispatchRequest.js&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(config);</span><br><span class="line">  <span class="keyword">let</span> chains = [dispatchRequest, <span class="literal">undefined</span>];</span><br><span class="line">  <span class="built_in">this</span>.interceptors.request.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.unshift(item.fulfilled, item.rejected)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">this</span>.interceptors.response.handlers.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    chains.push(item.fulfilled, item.rejected);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">while</span> (chains.length) &#123;</span><br><span class="line">    promise = promise.then(chains.shift(), chains.shift());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="CancelToken-js"><a href="#CancelToken-js" class="headerlink" title="CancelToken.js"></a>CancelToken.js</h3><ul>
<li>闭包的经典应用</li>
<li>将<code>promise</code>的控制权交于外界 使用者控制</li>
<li>使用者一旦调用方法 <code>promise</code>就可以自动触发 <code>promise.resolve</code></li>
<li>随后只要在 <code>xhr</code> 网络请求中 调用 <code>xhr.abort()</code> 来中断请求<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">CancelToken</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> resolvePromise;</span><br><span class="line">  <span class="built_in">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolvePromise = resolve</span><br><span class="line">  &#125;);</span><br><span class="line">  executor(<span class="function">() =&gt;</span> resolvePromise());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/eternallycyf/eternallcyf-axios">上述代码的仓库</a></li>
<li><a href="https://github.com/axios/axios">axios</a></li>
<li><a href="https://axios-http.com/zh/">axios-doc</a></li>
</ul>
]]></content>
      <categories>
        <category>soundCode</category>
      </categories>
      <tags>
        <tag>soundCode</tag>
      </tags>
  </entry>
  <entry>
    <title>ReactNative遇到的深坑和搭建项目建构</title>
    <url>/eternallycyf/ReactNative%E9%81%87%E5%88%B0%E7%9A%84%E6%B7%B1%E5%9D%91%E5%92%8C%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%BB%BA%E6%9E%84/</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1.导读"></a>1.导读</h2><ul>
<li>在搭建 <code>React Native</code> 的途中真的是遇到太多问题了</li>
<li>。。。这里记录一下</li>
<li>使用的操作系统是 <code>Macos Monterey</code></li>
<li>可以直接克隆我的仓库 修改成自己的架构<ul>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">仓库地址</a></li>
<li>已经集成了 <ul>
<li>antd/react-native </li>
<li>dva </li>
<li>axios </li>
<li>react-native-config (区分开发环境)</li>
<li>eslint</li>
<li>typescript</li>
<li>reactnavigation (路由导航)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-bug汇总"><a href="#2-bug汇总" class="headerlink" title="2.bug汇总"></a>2.bug汇总</h2><ul>
<li>先进行下一步,遇到问题再回来看看</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 搭建环境下载依赖一直失败</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># yarn ios 运行模拟器时候没有 app</span><br><span class="line"><span class="comment">// 需要给权限</span></span><br><span class="line">sudo chown -R eternallycyf ~/react_native_project</span><br><span class="line">chmod <span class="number">777</span> RN</span><br><span class="line"># 运行报错</span><br><span class="line"><span class="comment">// 端口在运行了 杀下端口</span></span><br><span class="line"></span><br><span class="line"># react native <span class="keyword">debugger</span> 显示一片空白</span><br><span class="line"><span class="comment">// react-devtools 版本冲突 请卸载全局 react-devtools</span></span><br><span class="line"><span class="comment">// 并按照react native debugger 页面提示的版本 安装</span></span><br><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// github 有 issue</span></span><br><span class="line"># react native <span class="keyword">debugger</span> 网络请求不显示</span><br><span class="line"><span class="comment">// 他这个需要先手动 在 element页面 右键点击 enable network 开启</span></span><br><span class="line"></span><br><span class="line"># npm加入其他包的时候请重新 pod install 或者直接重新运行打包</span><br><span class="line"></span><br><span class="line"># react-native-config ios配置成功 安卓config是一个空对象或者一个杂乱的对象</span><br><span class="line"><span class="comment">// 请确定 </span></span><br><span class="line"><span class="comment">// 1. android/app/build.gradle 设置了 resValue &quot;string&quot;, &quot;build_config_package&quot;, &quot;com.rn&quot;</span></span><br><span class="line"><span class="comment">//                                   (他的值不是固定的 是另一个文件里的字段)</span></span><br><span class="line"><span class="comment">// 2. android/app/src/main/AndroidManifest.xml &lt;manifest package=&quot;com.rn&quot;&gt;  </span></span><br><span class="line"><span class="comment">// 其实这个就在npm首页有写 当时我也没有看到 找了很久 。。。</span></span><br></pre></td></tr></table></figure>

<h2 id="3-准备阶段"><a href="#3-准备阶段" class="headerlink" title="3.准备阶段"></a>3.准备阶段</h2><h3 id="基本环境的安装"><a href="#基本环境的安装" class="headerlink" title="基本环境的安装"></a>基本环境的安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br><span class="line">npx react-native init RN --template react-native-template-typescript</span><br><span class="line">yarn android </span><br><span class="line">yarn ios</span><br><span class="line"># 具体流程: 参考官网</span><br><span class="line"><span class="comment">// 按着官网的先一部一部来 把基础必备的东西先装了 </span></span><br><span class="line"><span class="comment">// 例如: Xcode Watchman Node CocoaPods</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.react-native.cn/docs/environment-setup</span></span><br><span class="line"># 安装过程中遇到的问题: 指定镜像(必须 或者自己代理)</span><br><span class="line"><span class="comment">// 参考这篇文章 基本解决的搭建环境的所有问题</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//www.jianshu.com/p/412d760bcacd</span></span><br></pre></td></tr></table></figure>

<h3 id="Android模拟器"><a href="#Android模拟器" class="headerlink" title="Android模拟器"></a>Android模拟器</h3><ul>
<li>这里就不提这个了</li>
<li>按照官网一步一步操作 &amp;&amp; 有一个梯子 不然下载应用网站打不开 或者找第三方的地方下载</li>
<li>其次 配置环境变量时 <code>open ~/.bash_profile </code> 或  <code>open ~/.zshrc</code> 打不开<ul>
<li>可能是自己电脑之前配置有问题 </li>
<li>用这个命令打开 <code>open -e ~/.bash_profile</code></li>
</ul>
</li>
</ul>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="我的方案"><a href="#我的方案" class="headerlink" title="我的方案"></a>我的方案</h4><ul>
<li>我这里最终搭建的体系是采用 <code>react-native-debugger</code> 和 <code>ios</code>模拟器结合<ul>
<li><code>react-native-debugger 集成了 console.log network redux</code> 调试工具等功能</li>
<li><code>ios</code> 模拟器 支持提示错误 元素审查 等功能</li>
<li>基本满足调试的所有需要了 </li>
</ul>
</li>
<li><img class="inline-img" src="https://user-images.githubusercontent.com/3001525/29451479-6621bf1a-83c8-11e7-8ebb-b4e98b1af91c.png" style="height:300px"/></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># brew install --cask react-native-<span class="keyword">debugger</span></span><br><span class="line">然后直接打开应用就行 <span class="comment">// 注意他直接是一个应用 不是直接运行在浏览器的</span></span><br></pre></td></tr></table></figure>

<h4 id="调试如何使用"><a href="#调试如何使用" class="headerlink" title="调试如何使用"></a>调试如何使用</h4><blockquote>在调试中遇到的bug我统一放在第二章说明了,有问题话往前翻</blockquote>

<ul>
<li>刷新模拟器:两种方法<ul>
<li>1.按两下 <code>R || r</code> 快速刷新</li>
<li>2.手动在模拟器操作<ul>
<li><code>ios: command+R || command+D  =&gt; reload</code></li>
<li><code>android: command + m reload</code> (模拟器在 应用 <code>=&gt; avd =&gt; manager</code>里面)</li>
</ul>
</li>
</ul>
</li>
<li>审查元素<ul>
<li><code>commend+d</code></li>
<li><code>show Inspector</code></li>
<li>点击元素</li>
</ul>
</li>
<li><code>console.log</code><ul>
<li>1.直接使用 <code>react-native-debugger</code> 调试工具<code>console.log</code> 界面就能看到了</li>
<li>2.运行模拟器的终端</li>
<li>3.<code>command+D</code><ul>
<li><code>Debug with Chrome</code></li>
<li>切换到<code>console</code>界面</li>
<li>将<code>top</code>切换为 <code>debug...</code></li>
</ul>
</li>
</ul>
</li>
<li>网络请求<ul>
<li><code>react native debugger</code></li>
<li>在 <code>Element</code> 页面 右键开启 <code>enable network</code></li>
<li>然后在 <code>network</code> 页面刷新就能看到网络请求了</li>
</ul>
</li>
<li><code>redux|dva</code><ul>
<li>在<code>react native debugger</code> 页面就能看到了</li>
</ul>
</li>
</ul>
<h4 id="其他调试方案单独步骤"><a href="#其他调试方案单独步骤" class="headerlink" title="其他调试方案单独步骤"></a>其他调试方案单独步骤</h4><blockquote>如果按照react-native-debugger方案,不需要看这里的内容,直接跳过</blockquote>

<h5 id="ts语法提示"><a href="#ts语法提示" class="headerlink" title="ts语法提示"></a>ts语法提示</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save @types/react-native</span><br><span class="line"><span class="comment">// 根目录构建tsconfig.json文件</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;allowSyntheticDefaultImports&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;isolatedModules&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;jsx&quot;</span>: <span class="string">&quot;react&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lib&quot;</span>: [</span><br><span class="line">      <span class="string">&quot;es6&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;metro.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;jest.config.js&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vscode 安装 react native tools 插件</span></span><br><span class="line"><span class="comment">// 打开vscode开发者工具 就可以看到网络请求了</span></span><br></pre></td></tr></table></figure>

<h5 id="react调试工具"><a href="#react调试工具" class="headerlink" title="react调试工具"></a>react调试工具</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// npm i -g react-devtools@^4.13.0</span></span><br><span class="line"><span class="comment">// 终端输入命令 react-devtools</span></span><br><span class="line"><span class="comment">// 在模拟器刷新后 react-devtools 就有内容了</span></span><br></pre></td></tr></table></figure>

<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">__tests__</span><br><span class="line">.bundle</span><br><span class="line">android</span><br><span class="line">ios</span><br><span class="line">node_modules</span><br><span class="line">.buckconfig</span><br><span class="line">.flowconfig</span><br><span class="line">.ruby-version</span><br><span class="line">.watchmanconfig</span><br><span class="line">App.js</span><br><span class="line">app.json</span><br><span class="line">babel.config.js</span><br><span class="line">Gemfile</span><br><span class="line">Gemfile.lock</span><br><span class="line">index.js</span><br><span class="line">metro.config.js</span><br><span class="line">package.json</span><br></pre></td></tr></table></figure>

<h2 id="4-插件集成"><a href="#4-插件集成" class="headerlink" title="4. 插件集成"></a>4. 插件集成</h2><h3 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add dva-core-ts react-redux @types/react-redux</span><br><span class="line"><span class="comment">// 随后引入dva就可以了</span></span><br><span class="line"><span class="keyword">import</span> &#123;create, Model&#125; <span class="keyword">from</span> <span class="string">&#x27;dva-core-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createLoading <span class="keyword">from</span> <span class="string">&#x27;dva-loading-ts&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> models <span class="keyword">from</span> <span class="string">&#x27;@/models/index&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/config/http&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home, &#123;HomeModelType&#125; <span class="keyword">from</span> <span class="string">&#x27;@/models/home&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Animated&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> modelExtend = <span class="built_in">require</span>(<span class="string">&#x27;dva-model-extend&#x27;</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建实例</span></span><br><span class="line"><span class="keyword">const</span> app = create(&#123;</span><br><span class="line">  <span class="attr">onError</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2.加载model对象</span></span><br><span class="line">models.forEach(<span class="function"><span class="params">model</span> =&gt;</span> &#123;</span><br><span class="line">  app.model(model);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(createLoading());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.启动dva</span></span><br><span class="line">app.start();</span><br><span class="line"><span class="comment">// 4.导出dva的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app._store;</span><br><span class="line"></span><br><span class="line">interface Cached &#123;</span><br><span class="line">  [key: string]: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cached: Cached = &#123;</span><br><span class="line">  <span class="attr">home</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerModel</span>(<span class="params">model: Model</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!cached[model.namespace]) &#123;</span><br><span class="line">    app.model(model);</span><br><span class="line">    cached[model.namespace] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createModel</span>(<span class="params">namespace: string</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> model: HomeModelType = modelExtend(home, &#123;</span><br><span class="line">    namespace,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">      <span class="attr">scrollValue</span>: <span class="keyword">new</span> Animated.Value(<span class="number">0</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  registerModel(model);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="react-native-config"><a href="#react-native-config" class="headerlink" title="react-native-config"></a>react-native-config</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 区分多环境 需要重新打包</span></span><br><span class="line">yarn add react-native-config</span><br><span class="line"># 配置 参考Npm官网就可以了 </span><br><span class="line"><span class="comment">// 如果 ios 可以显示 , android 打印结果为空对象或者一个对象里有一堆无关的数据</span></span><br><span class="line"><span class="comment">// 请确定自己正确配置了 resValue  这个值是另一个文件中的变量</span></span><br><span class="line"><span class="comment">// 这里的 bug 解决方式放在最前面了</span></span><br><span class="line">...</span><br><span class="line">npx react-native link react-native-config</span><br><span class="line"># 根目录新建 .env</span><br><span class="line">API_URL=https:<span class="comment">//myapi.com</span></span><br><span class="line"># App.tsx</span><br><span class="line"><span class="keyword">import</span> Config <span class="keyword">from</span> <span class="string">&#x27;react-native-config&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="babel-plugin-module-resolve"><a href="#babel-plugin-module-resolve" class="headerlink" title="babel-plugin-module-resolve"></a>babel-plugin-module-resolve</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add babel-plugin-<span class="built_in">module</span>-resolver</span><br><span class="line"># babel.config.js</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [<span class="string">&#x27;module:metro-react-native-babel-preset&#x27;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;module-resolver&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">root</span>: [<span class="string">&#x27;./src&#x27;</span>],</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">          <span class="string">&#x27;@/utils&#x27;</span>: <span class="string">&#x27;./src/utils&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/pages&#x27;</span>: <span class="string">&#x27;./src/pages&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/navigator&#x27;</span>: <span class="string">&#x27;./src/navigator&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/models&#x27;</span>: <span class="string">&#x27;./src/models&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/config&#x27;</span>: <span class="string">&#x27;./src/config&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/components&#x27;</span>: <span class="string">&#x27;./src/components&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;@/assets&#x27;</span>: <span class="string">&#x27;./src/assets&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"># tsconfig.json</span><br><span class="line"> <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./src&quot;</span>,                      </span><br><span class="line"> <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@/assets/*&quot;</span>: [<span class="string">&quot;assets/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/components/*&quot;</span>: [<span class="string">&quot;components/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/config/*&quot;</span>: [<span class="string">&quot;config/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/models/*&quot;</span>: [<span class="string">&quot;models/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/navigator/*&quot;</span>: [<span class="string">&quot;navigator/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/pages/*&quot;</span>: [<span class="string">&quot;pages/*&quot;</span>],</span><br><span class="line">      <span class="string">&quot;@/utils/*&quot;</span>: [<span class="string">&quot;utils/*&quot;</span>]</span><br><span class="line"> &#125;,       </span><br></pre></td></tr></table></figure>

<h3 id="antd-reactNative"><a href="#antd-reactNative" class="headerlink" title="antd/reactNative"></a>antd/reactNative</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; View, Text, Button &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; Icon &#125; <span class="keyword">from</span> <span class="string">&#x27;@ant-design/react-native&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="React-Navigation"><a href="#React-Navigation" class="headerlink" title="React Navigation"></a>React Navigation</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">这个直接参考官方文档就可以了 我没有遇到什么问题</span><br><span class="line">只是有些API有版本问题</span><br></pre></td></tr></table></figure>

<h2 id="5-参考链接"><a href="#5-参考链接" class="headerlink" title="5. 参考链接"></a>5. 参考链接</h2><ul>
<li><a href="https://www.react-native.cn/docs/environment-setup">ReactNative#官网搭建开发环境文档</a></li>
<li><a href="https://www.jianshu.com/p/412d760bcacd">搭建环境问题的解决</a></li>
<li><a href="https://github.com/eternallycyf/react-native-dva-template">我的reactNative项目模板仓库</a></li>
<li><a href="https://dvajs.com/guide/#%E7%89%B9%E6%80%A7">dva</a></li>
<li><a href="https://www.npmjs.com/package/react-native-config">react-native-config</a></li>
<li><a href="https://www.npmjs.com/package/babel-plugin-module-resolve">babel-plugin-module-resolve</a></li>
<li><a href="https://rn.mobile.ant.design/index-cn">antd-RN</a></li>
<li><a href="https://reactnavigation.org/">React Navigation</a></li>
</ul>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>自己做一个脚手架</title>
    <url>/eternallycyf/%E8%87%AA%E5%B7%B1%E5%81%9A%E4%B8%80%E4%B8%AA%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="为什么需要一个脚手架"><a href="#为什么需要一个脚手架" class="headerlink" title="为什么需要一个脚手架"></a>为什么需要一个脚手架</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">呃。。。为了方便copy</span><br><span class="line">哈哈。为了方便自己克隆自己的仓库。顺便了解下脚手架是如何制作的</span><br><span class="line">在这里做一个克隆自己仓库的脚手架</span><br><span class="line">还是非常简单的。只需要克隆我的脚手架文件。换成自己定义的名字</span><br><span class="line">npm发布下就可以用了</span><br><span class="line">废话不多说,开始正题了。</span><br></pre></td></tr></table></figure>

<h2 id="1-克隆基本代码"><a href="#1-克隆基本代码" class="headerlink" title="1.克隆基本代码"></a>1.克隆基本代码</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/eternallycyf/</span>lrxc-cli.git</span><br></pre></td></tr></table></figure>

<h2 id="2-更改api查询名称"><a href="#2-更改api查询名称" class="headerlink" title="2.更改api查询名称"></a>2.更改<code>api</code>查询名称</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里是调用的github的api 查询自己的仓库信息</span></span><br><span class="line"># ./src/create.js</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">&#x27;https://api.github.com/users/eternallycyf/repos&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://api.github.com/repos/eternallycyf/<span class="subst">$&#123;repo&#125;</span>/tags`</span>);</span><br><span class="line">  <span class="keyword">let</span> api = <span class="string">`eternallycyf/<span class="subst">$&#123;repo&#125;</span>`</span></span><br><span class="line">  将这三行的eternallycyf换成自己github的名字</span><br></pre></td></tr></table></figure>

<h2 id="3-更换提示信息"><a href="#3-更换提示信息" class="headerlink" title="3.更换提示信息"></a>3.更换提示信息</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./src/main.js </span><br><span class="line">将 lrxc-cli 换成自己脚手架的名字</span><br></pre></td></tr></table></figure>

<h2 id="4-设置-package-json"><a href="#4-设置-package-json" class="headerlink" title="4.设置 package.json"></a>4.设置 <code>package.json</code></h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 将这些<span class="built_in">JSON</span>展示字段的value换成自己的 这些字段主要用于npm包页面的展示</span><br><span class="line"><span class="comment">// 我的脚手架叫做 lrxc-cli</span></span><br><span class="line">name</span><br><span class="line">version</span><br><span class="line">description</span><br><span class="line">author</span><br><span class="line">keywords</span><br><span class="line">homepage</span><br><span class="line">repository</span><br><span class="line">bin</span><br></pre></td></tr></table></figure>

<h2 id="5-发布"><a href="#5-发布" class="headerlink" title="5.发布"></a>5.发布</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="number">1.</span>在npm官网注册自己的账号</span><br><span class="line"># <span class="number">2.</span>注意</span><br><span class="line">注意第一次发布需要邮箱验证</span><br><span class="line">并且发布时候npm必须是npm源 不能是淘宝的 否则会一直失败</span><br><span class="line">可以使用 nrm 来切换</span><br><span class="line">yarn <span class="built_in">global</span> add nrm </span><br><span class="line">nrm ls</span><br><span class="line">nrm use npm</span><br><span class="line"># <span class="number">3.</span>npm login</span><br><span class="line">输入自己账号密码</span><br><span class="line"># <span class="number">4.</span>npm publish</span><br><span class="line">当没有报错的时候就发布成功了</span><br><span class="line">可以在npm官网搜索到自己的包</span><br><span class="line"># <span class="number">5.</span>npm install xxx -g</span><br><span class="line">xxx create 项目名</span><br><span class="line">这时候你就可以看到自己github的所有仓库啦</span><br><span class="line"># <span class="number">6.</span>这个脚手架是根据 git tag来下载的</span><br><span class="line">所以要对想要clone的 仓库打tag</span><br><span class="line">git tag -a v1<span class="number">.0</span> -m <span class="string">&quot;my version 1.0&quot;</span></span><br><span class="line">此时终端运行 xxx create 项目名</span><br><span class="line">就会跳出一个 <span class="number">1.0</span> 的下一步</span><br><span class="line">按住回车就开始克隆啦</span><br></pre></td></tr></table></figure>

<h2 id="6-使用到的包"><a href="#6-使用到的包" class="headerlink" title="6.使用到的包"></a>6.使用到的包</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios:发送ajax请求的</span><br><span class="line"><span class="attr">commander</span>:提供终端命令行支持的包</span><br><span class="line"><span class="attr">consolidate</span>:用于从npm上下载东西统一模板引擎</span><br><span class="line">download-git-repo:下载仓库的</span><br><span class="line"><span class="attr">inquirer</span>:命令行交互工具</span><br><span class="line"><span class="attr">metalsmith</span>:遍历下载文件 是否需要模板渲染</span><br><span class="line"><span class="attr">ncp</span>: 社区</span><br><span class="line"><span class="attr">ora</span>: 命令行loading效果</span><br></pre></td></tr></table></figure>

<blockquote>
具体代码就不说了,从使用的包就可以看出来
就是使用nodejs通过github提供的api获取仓库信息
通过一些包完成命令行交互
然后又通过fs模块读取渲染下载文件
完成的简单实用的脚手架
如果需要定制需求的话
具体的API可以直接看npm包的页面
</blockquote>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>自己搭建一个gitlab</title>
    <url>/eternallycyf/%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAgitlab/</url>
    <content><![CDATA[<h1 id="自己搭建一个gitlab"><a href="#自己搭建一个gitlab" class="headerlink" title="自己搭建一个gitlab"></a>自己搭建一个gitlab</h1><blockquote>这里主要用到了jenkins docker-compose 和 gitlab提供的docker镜像来搭建的</blockquote>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">brew install jenkins-lts</span><br><span class="line">#</span><br><span class="line">brew services start jenkins-lts</span><br><span class="line">brew services restart jenkins-lts</span><br><span class="line">brew upgrade jenkins-lts</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//localhost:8080/</span></span><br></pre></td></tr></table></figure>
<h3 id="服务器安装"><a href="#服务器安装" class="headerlink" title="服务器安装"></a>服务器安装</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -itd -u root -p <span class="number">8080</span>:<span class="number">8080</span> -v jenkins-data:<span class="regexp">/var/</span>jenkins_home -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v <span class="string">&quot;$HOME&quot;</span>:<span class="regexp">/home --name jenkins jenkins/</span>jenkins</span><br><span class="line"><span class="comment">// jenkinsci/blueocean</span></span><br><span class="line">#</span><br><span class="line">docker logs jenkins</span><br><span class="line">记住自己的密匙</span><br><span class="line">#</span><br><span class="line"><span class="attr">http</span>:<span class="comment">//公网地址:8080/</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ul>
<li>启动并打开自己本地或者服务器<code>jenkins</code>的网页</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加CDN</span><br><span class="line">Manage jenkins =&gt; Manage Plugins =&gt; <span class="function"><span class="params">Advanced</span> =&gt;</span> URL</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//mirrors.tuna.tsinghua.edu.cn/jenkins/updates/current/update-center.json</span></span><br><span class="line"># 需要安装的必备插件</span><br><span class="line">Authorize Project</span><br><span class="line">GitHub Integration</span><br><span class="line">GitLab</span><br><span class="line">Publish Over SSH</span><br><span class="line">SSH Agent</span><br><span class="line">SSH </span><br><span class="line">SSH Pipeline Steps</span><br><span class="line">#</span><br><span class="line">安装docker-compose</span><br><span class="line"># vim docker-compose.yml </span><br><span class="line"><span class="attr">http</span>:<span class="comment">//xxx:8088/</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//公网地址:8088/users/sign_in</span></span><br><span class="line"># <span class="number">1</span></span><br><span class="line"><span class="comment">// 复制 https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml</span></span><br><span class="line"><span class="comment">// 更改以下几行替换成自己的相关信息</span></span><br><span class="line">gitlab</span><br><span class="line">- GITLAB_HOST=公网地址</span><br><span class="line">- GITLAB_ROOT_PASSWORD=管理员密码</span><br><span class="line">- GITLAB_ROOT_EMAIL=管理员邮箱</span><br><span class="line"> <span class="attr">ports</span>: <span class="comment">//映射端口</span></span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line"># <span class="number">2.</span></span><br><span class="line"><span class="comment">// 或者直接复制下方</span></span><br><span class="line"><span class="attr">version</span>: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services</span>:</span><br><span class="line">  web:</span><br><span class="line">    image: <span class="string">&#x27;twang2218/gitlab-ce-zh&#x27;</span></span><br><span class="line">    <span class="attr">restart</span>: always</span><br><span class="line">    <span class="attr">hostname</span>: <span class="string">&#x27;公网地址&#x27;</span></span><br><span class="line">    <span class="attr">environment</span>:</span><br><span class="line">      TZ: <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">      <span class="attr">GITLAB_OMNIBUS_CONFIG</span>: |</span><br><span class="line">        external_url <span class="string">&#x27;http://公网地址&#x27;</span></span><br><span class="line">        gitlab_rails[<span class="string">&#x27;gitlab_shell_ssh_port&#x27;</span>] = <span class="number">2222</span></span><br><span class="line">        unicorn[<span class="string">&#x27;port&#x27;</span>] = <span class="number">8888</span></span><br><span class="line">        nginx[<span class="string">&#x27;listen_port&#x27;</span>] = <span class="number">80</span></span><br><span class="line">    <span class="attr">ports</span>:</span><br><span class="line">      - <span class="string">&#x27;8088:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2443:443&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;2222:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes</span>:</span><br><span class="line">      - ./config:<span class="regexp">/etc/gi</span>tlab</span><br><span class="line">      - ./data:<span class="regexp">/var/</span>opt/gitlab</span><br><span class="line">      - ./logs:<span class="regexp">/var/</span>log/gitlab</span><br></pre></td></tr></table></figure>

<h3 id="开启CICD"><a href="#开启CICD" class="headerlink" title="开启CICD"></a>开启CICD</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">创建项目</span><br><span class="line">设置</span><br><span class="line">集成</span><br><span class="line"></span><br><span class="line">选择 Campfire push evnets <span class="comment">// 当push时候触发</span></span><br><span class="line">取消ssh verification <span class="comment">// 没有证书</span></span><br></pre></td></tr></table></figure>

<h2 id="使用jekins"><a href="#使用jekins" class="headerlink" title="使用jekins"></a>使用jekins</h2><h3 id="高级配置"><a href="#高级配置" class="headerlink" title="高级配置"></a>高级配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">新建任务</span><br><span class="line">jenkins-demo</span><br><span class="line">自由风格</span><br><span class="line">源码管理</span><br><span class="line">构建触发器</span><br><span class="line"><span class="comment">//填写到 gitlab 集成 url</span></span><br><span class="line">build when a change is pushed to gitLab</span><br><span class="line">选中push event</span><br><span class="line">opened merge Request events</span><br><span class="line">approved merge request(ee-only)</span><br><span class="line">comments</span><br><span class="line">comment <span class="keyword">for</span> triggering a build</span><br></pre></td></tr></table></figure>

<h3 id="Jenkinsfile"><a href="#Jenkinsfile" class="headerlink" title="Jenkinsfile"></a>Jenkinsfile</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">      docker &#123;</span><br><span class="line">        image <span class="string">&#x27;node:10&#x27;</span></span><br><span class="line">        args <span class="string">&#x27;-p 20000:8080&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Build&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Building..&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;node -v&#x27;</span></span><br><span class="line">                sh <span class="string">&#x27;echo &quot;hello&quot;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Test&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Testing..&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="title">stage</span>(<span class="params"><span class="string">&#x27;Deploy&#x27;</span></span>)</span> &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;Deploying....&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="端口问题"><a href="#端口问题" class="headerlink" title="端口问题"></a>端口问题</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// jenkins 和 gitlab在一个服务器上</span></span><br><span class="line">管理中心</span><br><span class="line">设置</span><br><span class="line">网络</span><br><span class="line">外发请求</span><br><span class="line">选中 allow requests ...</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>React实现虚拟滚动</title>
    <url>/eternallycyf/React%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E6%BB%9A%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>在很早之前我们都是通过滚动距离来进行判断,是否在可视区,进而判断是否渲染,完成虚拟列表</li>
<li>这个过程是有些繁琐的,当滚动回去的时候 还要重新计算逻辑</li>
<li>但是<code>js</code> 的新对象 <code>IntersectionObserver</code> 就完美解决了这个问题</li>
<li>可以通过这个对象的方法进行设计,直接可以根据 <code>entry.isIntersecting</code> 判断是否在可视区</li>
<li><code>true</code> 就是可视区 <code>false</code> 就在屏幕之外</li>
<li>逻辑结构简单明了</li>
<li>通过 <code>react Hooks</code> 进行了封装</li>
<li>用的时候只需要调用下就可以很简单的完成一个虚拟列表了</li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">true</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure>

<h2 id="index-tsx"><a href="#index-tsx" class="headerlink" title="index.tsx"></a>index.tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useVirtualList <span class="keyword">from</span> <span class="string">&#x27;./useVirtualList&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props: any</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="keyword">var</span> imgUrlArr = [ <span class="comment">// 所有需要加载的图片链接</span></span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">10vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27;, <span class="attr">textAlign:</span> &#x27;<span class="attr">center</span>&#x27; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the &#123;props.title&#125; girl<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrlArr[(0</span> | <span class="attr">Math.random</span>() * <span class="attr">7</span>)]&#125; <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;, <span class="attr">height:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">IndexPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        Array.from(&#123; length: 100 &#125;).map((_, index) =&gt; (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">        ))</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>通过docker部署项目</title>
    <url>/eternallycyf/%E9%80%9A%E8%BF%87docker%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><blockquote>具体安装流程可以参考官网,一步一步走没有问题的,这里这是总结下</blockquote>

<ul>
<li><a href="https://docs.docker.com/get-started/">docker安装流程</a></li>
</ul>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="启动和检查"><a href="#启动和检查" class="headerlink" title="启动和检查"></a>启动和检查</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">docker version</span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h3 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://qwm8wimf.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h3 id="docker-配置-vim"><a href="#docker-配置-vim" class="headerlink" title="docker 配置 vim"></a>docker 配置 vim</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">yum install unzip</span><br></pre></td></tr></table></figure>

<h2 id="2-基本命令"><a href="#2-基本命令" class="headerlink" title="2.基本命令"></a>2.基本命令</h2><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">docker search</span><br><span class="line">            mysql --filter=STARS=<span class="number">3000</span> <span class="comment"># 查找 3000 starts 以上的</span></span><br><span class="line">docker pull 镜像名[:tag]               <span class="comment"># 下载指定版本</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker images</span><br><span class="line">              -a --all      <span class="comment"># 列出所有的镜像</span></span><br><span class="line">              -q --quiet    <span class="comment"># 只显示镜像的 id</span></span><br><span class="line">              -aq           <span class="comment"># 常用</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">docker rmi </span><br><span class="line">            -f imageId1 imageId2 ...   <span class="comment"># 删除</span></span><br><span class="line">            -f $(docker images -aq)    <span class="comment"># 删除所有     </span></span><br></pre></td></tr></table></figure>

<h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">docker ps                         <span class="comment"># 查看正在运行的容器</span></span><br><span class="line">          -a                      <span class="comment"># 查看曾经运行的容器</span></span><br><span class="line">          -a -n=?                 <span class="comment"># 指定个数显示</span></span><br><span class="line">          -q                      <span class="comment"># 只显示 imagesId</span></span><br><span class="line"><span class="comment"># docker run -d --name nginx01 -p 3344:80 nginx</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> []  image[:tag] </span></span><br><span class="line">           -d                     <span class="comment"># 以后台方式运行</span></span><br><span class="line">              -p  <span class="number">8080</span>:<span class="number">8080</span> 镜像名:tag    </span><br><span class="line">           -it                    <span class="comment"># 使用交互方式运行 前台运行</span></span><br><span class="line">           -p                     <span class="comment"># 指定容器端口 -p 8080:8080</span></span><br><span class="line">                     <span class="comment"># 第一个端口是本地(公网) 第二个是容器内的</span></span><br><span class="line">               -p ip:主机端口:容器端口</span><br><span class="line">               -p 主机端口:容器端口  <span class="comment">## 常用</span></span><br><span class="line">               -p 容器端口</span><br><span class="line">               容器端口</span><br><span class="line">           --name xxx </span><br><span class="line">           -v 主机目录:容器内目录    </span><br><span class="line">                 <span class="comment">## 匿名挂载 -v 容器内路径 </span></span><br><span class="line">                 docker ... -v 容器内路径 nginx</span><br><span class="line">                 <span class="comment">## 具名挂载 映射 自定义名字前不带斜杠</span></span><br><span class="line">                 docker ... -v 自定义名字:容器内路径 nginx</span><br><span class="line">                 <span class="comment">### volume</span></span><br><span class="line">                 docker <span class="keyword">volume</span><span class="bash"> ls</span></span><br><span class="line">                              inspect 自定义名字</span><br><span class="line">                              <span class="comment"># /var/lib/docker/volumns/...</span></span><br><span class="line">                              create</span><br><span class="line">                              prune</span><br><span class="line">                              rm</span><br><span class="line">                 <span class="comment">### -v 自定义名字:容器路径[:ro|:rw]</span></span><br><span class="line">                 指定容器内部 读写权限 </span><br><span class="line">           -e                     <span class="comment"># 配置环境</span></span><br><span class="line">           -P                     <span class="comment"># 随机指定端口 大写的P</span></span><br><span class="line">           --rm                   <span class="comment"># 用完就删除掉</span></span><br><span class="line">   <span class="comment">## 运行容器 </span></span><br><span class="line">   docker <span class="keyword">run</span><span class="bash"> -it centos /bin/bash </span></span><br><span class="line">   <span class="comment">## 进入容器</span></span><br><span class="line">   docker exec -it 容器名 /bin/bash <span class="comment"># 开启一个新的终端</span></span><br><span class="line">   docker attach 容器ID            <span class="comment"># 进入正在运行的命令行 不是新窗口</span></span><br><span class="line">   <span class="comment">## 退出容器</span></span><br><span class="line">   exit</span><br><span class="line">   按住 ctrl + p + q              <span class="comment"># 退出 但不关闭容器 </span></span><br><span class="line">   <span class="comment">## 删除容器</span></span><br><span class="line">   docker rm 容器ID</span><br><span class="line">   docker rm -f $(docker ps -aq)</span><br><span class="line">   docker ps -a -q|xargs docker rm </span><br><span class="line">   <span class="comment">## 启动容器</span></span><br><span class="line">   docker start 容器ID</span><br><span class="line">   <span class="comment">## 重启容器</span></span><br><span class="line">   docker restart 容器ID</span><br><span class="line">   <span class="comment">## 停止容器</span></span><br><span class="line">   docker stop 容器ID  </span><br><span class="line">   <span class="comment">## 强制停止容器</span></span><br><span class="line">   docker kill 容器ID</span><br></pre></td></tr></table></figure>

<h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包 Dockerfile 文件  </span></span><br><span class="line"> docker build -f dockerfile1 -t mydocker .</span><br><span class="line">              -f dockerfile文件名/文件路径</span><br><span class="line">              -t . 生成文件路径 .代表当前路径</span><br></pre></td></tr></table></figure>



<h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker version</span><br><span class="line">docker info</span><br><span class="line">docker --help</span><br><span class="line">docker stats                                  <span class="comment"># 查看cpu</span></span><br><span class="line">https://docs.docker.com/reference/</span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">docker logs</span><br><span class="line">       docker logs -tf 容器ID</span><br><span class="line">       docker logs -tf --tail [number] 容器ID</span><br><span class="line">     <span class="comment"># docker run -d centos /bin/sh -c &quot;while true;do echo   &#x27;eternallycyf&#x27;;sleep 1;done&quot;</span></span><br><span class="line"><span class="comment"># 查看 容器的进程信息 端口等等</span></span><br><span class="line">docker top 容器ID             </span><br><span class="line"><span class="comment"># 查看容器元信息</span></span><br><span class="line">docker inspect 容器ID         </span><br><span class="line"><span class="comment"># 将容器内的文件 复制出来</span></span><br><span class="line">docker cp 容器ID:容器内路径 目的地主机路径</span><br><span class="line">docker cp 容器ID:/home/eternall.md /home</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker history imageID --no-trunc</span><br></pre></td></tr></table></figure>

<h3 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h3><h4 id="dockerhub"><a href="#dockerhub" class="headerlink" title="dockerhub"></a>dockerhub</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker login -u 用户名 -p 密码</span><br><span class="line">docker logout</span><br></pre></td></tr></table></figure>

<h4 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># login</span></span><br><span class="line">docker login --username=用户名 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">docker pull 镜像名:tag</span><br><span class="line"><span class="comment"># push</span></span><br><span class="line">docker push eternallycyf/镜像名[:tag]</span><br></pre></td></tr></table></figure>

<h3 id="工作常用"><a href="#工作常用" class="headerlink" title="工作常用"></a>工作常用</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker tag centos eternallycyf/myCentos:<span class="number">1.0</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">  docker commit -m=<span class="string">&#x27;&#x27;</span> -a=<span class="string">&#x27;作者&#x27;</span> 容器ID 目标镜像名:[tag]</span><br><span class="line"><span class="comment"># push </span></span><br><span class="line">  docker push eternallycyf/镜像名:tag</span><br><span class="line"><span class="comment"># pull</span></span><br><span class="line">  docker pull 镜像名:tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将docker镜像压缩</span></span><br><span class="line">  docker save -o 压缩包名.zip 镜像名:tag </span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">docker load -i /usr/tmp/压缩包名.zip</span><br><span class="line"><span class="comment"># 上传到服务器</span></span><br><span class="line">scp 压缩包名.zip root@公网地址:/<span class="keyword">user</span>/tmp</span><br></pre></td></tr></table></figure>

<h3 id="容器互联-evth-pair"><a href="#容器互联-evth-pair" class="headerlink" title="容器互联 evth-pair"></a>容器互联 evth-pair</h3><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 桥接 container host none</span></span><br><span class="line">ip addr</span><br><span class="line">docker network ls</span><br><span class="line">docker network rm xxx</span><br><span class="line"><span class="comment"># docker0 默认 域名不能访问 --link 可以打通连接</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p --net bridge tomcat</span></span><br><span class="line"><span class="comment"># 自定义网络</span></span><br><span class="line"><span class="comment"># driver 默认 subnet 子网 geteway 网关</span></span><br><span class="line">docker network create --driver bridge --subnet <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">16</span> - geteway <span class="number">192.168</span>.<span class="number">0.1</span> mynet</span><br><span class="line">docker xxx --net mynet tomcat</span><br></pre></td></tr></table></figure>

<h4 id="link"><a href="#link" class="headerlink" title="link"></a>link</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在hosts 配置里链接了 </span></span><br><span class="line">--link 容器名 </span><br></pre></td></tr></table></figure>



<h2 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3. Dockerfile"></a>3. Dockerfile</h2><ul>
<li>命名为 Dockerfile 就会自动找他 </li>
</ul>
<h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># from 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="comment"># maintainer 维护者信息 姓名+邮箱</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> eternallycyf&lt;xxx@qq.com&gt;</span><br><span class="line"><span class="comment"># run 构建时候需要运行的命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install vim</span></span><br><span class="line"><span class="comment"># add 集成别的东西 会自动解压</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> 文件名 解压后的镜像内地址</span></span><br><span class="line"><span class="comment"># workdir 设置当前工作目录 / /bin/bash</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment"># valume 设置容器卷</span></span><br><span class="line">VALUME </span><br><span class="line"><span class="comment"># expose 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">RUN</span></span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本命令  只有最后一个会生效 可被替代 (覆盖) docker run xxx -l 就会替换掉 编写的 CMD [&quot;ls&quot;,&quot;-a&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span> </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;-a&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;----end---&#x27;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> /bin/bash</span></span><br><span class="line"><span class="comment"># entrypoint 脚本命令  可以追加命令 不</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># onbuild 当构建一个dockerfile 文件时 就触发这个指令</span></span></span><br><span class="line"><span class="keyword">ONBUILD</span></span><br><span class="line"><span class="comment"># copy 文件拷贝到镜像中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> readme.txt /user/<span class="built_in">local</span>/readme.txt</span></span><br><span class="line"><span class="comment"># env 环境变量 ENV </span></span><br><span class="line">  <span class="comment"># 例如 MYPATH user/local</span></span><br><span class="line">  <span class="comment"># 使用时候需要 $MYPATH</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /<span class="keyword">user</span>/local</span><br></pre></td></tr></table></figure>

<h3 id="数据卷共享"><a href="#数据卷共享" class="headerlink" title="数据卷共享"></a>数据卷共享</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -t --name docker01 容器ID </span><br><span class="line">docker run -it --name docker02 --volumes-<span class="keyword">from</span> docker01 容器ID</span><br><span class="line">这时这两个容器都是相互同步的 即使删除了 还在</span><br></pre></td></tr></table></figure>

<h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根目录创建 Dockerfile  </span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS installer</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> package.json ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm i tyarn -g</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tyarn</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">1</span>-alpine AS builder</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=installer /node_modules ./node_modules</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm run build</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span>  vixlet/nginx:alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /dist /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> ./nginx.conf /etc/nginx/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>;</span><br><span class="line">    server_name  <span class="number">127.0</span>.<span class="number">0.1</span>;</span><br><span class="line">    access_log off;</span><br><span class="line">    add_header X-Frame-Options sameorigin always;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /app;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-docker-compose"><a href="#4-docker-compose" class="headerlink" title="4. docker compose"></a>4. docker compose</h2><h3 id="基础步骤"><a href="#基础步骤" class="headerlink" title="基础步骤"></a>基础步骤</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">dockerfile</span><br><span class="line">docker-compose.yml</span><br><span class="line">docker-compose up</span><br><span class="line">docker-compose down </span><br><span class="line"><span class="comment">#</span></span><br><span class="line">可以使用 Dockerfile 生成镜像</span><br><span class="line">或者 docker-compose.yml image</span><br></pre></td></tr></table></figure>

<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br><span class="line"># 重新构建</span><br><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>

<h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本</span></span><br><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line"><span class="comment"># 服务</span></span><br><span class="line">services:</span><br><span class="line">  web:</span><br><span class="line">    <span class="comment">## build 生成的 指定dockerfile</span></span><br><span class="line">    build: .</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;5000:5000&quot;</span></span><br><span class="line">    <span class="comment">## 镜像</span></span><br><span class="line">    image: <span class="string">&quot;redis:alpine</span></span><br><span class="line"><span class="string">    network:  </span></span><br><span class="line"><span class="string">    ## 部署</span></span><br><span class="line"><span class="string">    deploy:</span></span><br><span class="line"><span class="string">      ### 副本</span></span><br><span class="line"><span class="string">      replicas: 6</span></span><br><span class="line"><span class="string"># 其他配置</span></span><br><span class="line"><span class="string">volumns: </span></span><br><span class="line"><span class="string">network:</span></span><br><span class="line"><span class="string">configs:</span></span><br></pre></td></tr></table></figure>

<h2 id="5-doker-swarm"><a href="#5-doker-swarm" class="headerlink" title="5. doker swarm"></a>5. doker swarm</h2><h4 id="service"><a href="#service" class="headerlink" title="service"></a>service</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">docker service update</span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">双主双从: 假设一个节点挂了 其他节点是否可用</span><br><span class="line">Raft 协议: 保证大多数节点存活才可以用 只要&gt;<span class="number">1</span> 集群至少大于<span class="number">3</span>台</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker swarm init --advertise-addr IP地址</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">docker node ls</span><br><span class="line">docker swarm join-token manager</span><br><span class="line">docker swarm join-token worker</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker swarm leave</span><br><span class="line">update</span><br></pre></td></tr></table></figure>


<h3 id="6-docker-stack"><a href="#6-docker-stack" class="headerlink" title="6. docker stack"></a>6. docker stack</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 单机</span><br><span class="line">docker-compose up -d workpress.yaml</span><br><span class="line"># 集群</span><br><span class="line">docker stack deploy worldpress.yaml</span><br></pre></td></tr></table></figure>

<h3 id="7-docker-secret"><a href="#7-docker-secret" class="headerlink" title="7. docker secret"></a>7. docker secret</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 配置密码 证书</span><br><span class="line">docker secrets</span><br><span class="line">   create</span><br><span class="line">   inspect</span><br><span class="line">   ls</span><br><span class="line">   rm</span><br></pre></td></tr></table></figure>

<h3 id="8-工具"><a href="#8-工具" class="headerlink" title="8. 工具"></a>8. 工具</h3><h4 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">docker pull mysql:<span class="number">5.7</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -d -p 3310:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=666222 --name mysql01 mysql:5.7</span></span><br><span class="line"><span class="comment"># navicat 3310 端口</span></span><br><span class="line">公网地址:<span class="number">3310</span></span><br><span class="line">root</span><br><span class="line"><span class="number">666222</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">此时在 服务器的  /home/mysql/conf data 目录就映射成功了</span><br></pre></td></tr></table></figure>


<h4 id="mysql-多个共享"><a href="#mysql-多个共享" class="headerlink" title="mysql 多个共享"></a>mysql 多个共享</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -v /etc/mysql/conf.d -v /<span class="keyword">var</span>/lib/mysql -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql01 mysql:<span class="number">5.7</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">3310</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=<span class="number">666222</span> --name mysql02 --volumes-<span class="keyword">from</span> mysql01 mysql:<span class="number">5.7</span></span><br></pre></td></tr></table></figure>

<h4 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">8000</span>:<span class="number">8000</span> -p <span class="number">9443</span>:<span class="number">9443</span> --name portainer --restart=always -v /<span class="keyword">var</span>/run/docker.sock:<span class="regexp">/var/</span>run/docker.sock -v portainer_data:<span class="regexp">/data portainer/</span>portainer-ee:latest</span><br><span class="line"></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//公网地址:9443/</span></span><br></pre></td></tr></table></figure>


<h3 id="9-bug"><a href="#9-bug" class="headerlink" title="9. bug"></a>9. bug</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">如果没有前台进程 </span><br><span class="line">docker就会自动停止</span><br><span class="line">例如 nginx 启动后如果没有被用 就会立即停止</span><br><span class="line"># tomcat</span><br><span class="line">阿里云下载的镜像 默认是阉割版的</span><br><span class="line">cp webapps.dist<span class="comment">/* webapps</span></span><br><span class="line"><span class="comment"># elasticsearch 太占内存</span></span><br><span class="line"><span class="comment">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; -e ES_JAVA_OPTS=&#x27;-Xms64m -Xmx512m&#x27; elasticsearch:7.6.2</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的基本命令</title>
    <url>/eternallycyf/Linux%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><ul>
<li>服务器启动</li>
<li><code>make</code></li>
<li><code>make install</code> <h3 id="开机关机"><a href="#开机关机" class="headerlink" title="开机关机"></a>开机关机</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 同步数据到硬盘</span></span><br><span class="line">sync </span><br><span class="line"><span class="comment">// 关机 </span></span><br><span class="line">shutdown</span><br><span class="line"><span class="comment">// 重启</span></span><br><span class="line">reboot  | shutdown -r now </span><br><span class="line"><span class="comment">// 10分钟后 重启 </span></span><br><span class="line">shutdown -r +<span class="number">10</span></span><br><span class="line"><span class="comment">// 关闭系统</span></span><br><span class="line">halt</span><br><span class="line">ifconfig en0  <span class="comment">// ipconfig/all     ip addr</span></span><br><span class="line">curl localhost:<span class="number">3344</span></span><br></pre></td></tr></table></figure>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">/</span><br><span class="line">bin  存放使用的命令</span><br><span class="line">boot linux核心文件</span><br><span class="line">dev  存放外部设备</span><br><span class="line">mnt  临时挂载文件系统 光驱</span><br><span class="line">media  u盘 光驱</span><br><span class="line">lib  动态链接共享库</span><br><span class="line">lost+fount 系统非法关机前没保存的文件</span><br><span class="line">proc 系统内存映射 系统信息</span><br><span class="line">sbin 系统管理员的系统管理程序</span><br><span class="line">srv  服务启动后需要提取的数据</span><br><span class="line">sys  存放文件系统</span><br><span class="line">run  临时文件系统</span><br><span class="line"></span><br><span class="line">etc  系统管理配置文件</span><br><span class="line">home 用户文件夹</span><br><span class="line">root 管理员文件夹</span><br><span class="line">opt  放数据库等守护进程</span><br><span class="line">user 用户的程序放在这里 qq 微信</span><br><span class="line">     user/bin  系统用户 </span><br><span class="line">     user/sbin 超级用户</span><br><span class="line">     user/src  内核源代码</span><br><span class="line"><span class="keyword">var</span>  日志</span><br><span class="line">tmp  临时文件</span><br><span class="line">www  存放网站</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="文件名字含义"><a href="#文件名字含义" class="headerlink" title="文件名字含义"></a>文件名字含义</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">drwx-wx-wx-x@ root root</span><br><span class="line"># 第一个字符 </span><br><span class="line">d 表示目录</span><br><span class="line">r 便是可以打开的文件</span><br><span class="line">- 文件</span><br><span class="line">l 链接文档</span><br><span class="line"># 三组</span><br><span class="line">r可读 w可写 x可执行 -没权限</span><br><span class="line">主权限 组权限 其他用户权限</span><br><span class="line"># 属组 属主</span><br><span class="line"># 文件大小 时间</span><br></pre></td></tr></table></figure>

<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">useradd - 选项 用户名</span><br><span class="line">        -m 用户名 自动创建这个用户的主目录</span><br><span class="line">  /etc/passwd</span><br><span class="line"># 删除用户</span><br><span class="line">userdel -r 用户名</span><br><span class="line"># 切换用户</span><br><span class="line">su 用户名</span><br><span class="line">sudo su</span><br><span class="line"># hostname 主机名</span><br><span class="line">hostname 修改主机名</span><br><span class="line"># 设置密码</span><br><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ls -a           <span class="comment">// 所有的文件</span></span><br><span class="line">   -l           <span class="comment">// 包含文件的属性和权限 没有隐藏文件</span></span><br><span class="line">   -al</span><br><span class="line">pwd             <span class="comment">// 显示当前目录</span></span><br></pre></td></tr></table></figure>

<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mkdir -p 路径     <span class="comment">// 递归创建 不加就只能在文件存在的基础上创建</span></span><br><span class="line"></span><br><span class="line">rm 文件名             <span class="comment">// 删除文件</span></span><br><span class="line">rmdir 文件夹名字       <span class="comment">// 删除文件夹</span></span><br><span class="line">rm -rf 文件或文件夹名字 <span class="comment">// 删除所有  /*</span></span><br><span class="line"></span><br><span class="line">cp 原路径 新路径      <span class="comment">// 复制文件</span></span><br><span class="line">cp -a 原路径 新路径   <span class="comment">// 复制文件夹</span></span><br><span class="line"></span><br><span class="line">mv 原路径 新路径     <span class="comment">// 移动文件或文件夹 重命名文件</span></span><br><span class="line">mv -f 原路径 新路径  <span class="comment">// 强制</span></span><br></pre></td></tr></table></figure>

<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 更改属组</span><br><span class="line">chgrp [-R] 属性名 文件名  <span class="comment">// -R 递归</span></span><br><span class="line"># 更改属主</span><br><span class="line">chown [-R] 属主名 文件名</span><br><span class="line">           属主名: 属组名 文件名</span><br><span class="line">           </span><br><span class="line"># 更改文件<span class="number">9</span>个属性</span><br><span class="line">chmod [-R] <span class="number">777</span> 文件名/文件名</span><br><span class="line"><span class="attr">r</span>:<span class="number">4</span> w:<span class="number">2</span> x:<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">cat  文件名   <span class="comment">// 显示文件内容</span></span><br><span class="line">nl   文件名   <span class="comment">// 显示行号</span></span><br><span class="line">less 文件名   <span class="comment">// 和more一样 但可以翻页 空格下一页 b 上一页</span></span><br><span class="line">:q 退出</span><br><span class="line">/搜索文本    <span class="comment">// 向下搜索</span></span><br><span class="line">?搜索文本    <span class="comment">// 向上搜索</span></span><br><span class="line">n           <span class="comment">// 自动跳转下一个</span></span><br><span class="line">N           <span class="comment">// 自动跳转上一个</span></span><br><span class="line"></span><br><span class="line">more 文件名   <span class="comment">// 一页一页的显示 </span></span><br><span class="line">head -n <span class="number">20</span> 文件名   <span class="comment">// 只看头几行</span></span><br><span class="line">tail 文件名   <span class="comment">// 只看结尾几行</span></span><br><span class="line">man ap 帮助命令</span><br></pre></td></tr></table></figure>

<h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">touch</span><br><span class="line">echo xxx &gt;&gt; 文件名</span><br></pre></td></tr></table></figure>

<h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 硬链接 </span><br><span class="line">允许一个文件有多个路径 防止误删</span><br><span class="line">A--B 就算A删除了 B还能访问</span><br><span class="line">ln A B</span><br><span class="line"># 软连接 </span><br><span class="line">快捷方式</span><br><span class="line">ln -s A B</span><br></pre></td></tr></table></figure>
<h3 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">esc :wq 退出</span><br><span class="line">i 输入</span><br><span class="line">x 删除</span><br><span class="line">:%d 选择所有的删除</span><br><span class="line">:%y 粘贴</span><br><span class="line">P 粘贴</span><br><span class="line"></span><br><span class="line">u 撤销</span><br><span class="line">ctrl+ r 取消撤销</span><br></pre></td></tr></table></figure>

<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">## 压缩</span><br><span class="line">tar cvf 压缩后名字.tar 路径 </span><br><span class="line">zip 压缩后名字.zip 原名</span><br><span class="line">## 解压</span><br><span class="line">tar xvf 名字.tar</span><br><span class="line">unzip 名字.zip</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>React常用自定义Hook</title>
    <url>/eternallycyf/React%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89Hook/</url>
    <content><![CDATA[<h1 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h1><h2 id="useDebounce"><a href="#useDebounce" class="headerlink" title="useDebounce"></a>useDebounce</h2><ul>
<li><p>防抖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useDebounce</span>(<span class="params">value: any, delay = <span class="number">300</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [debouncedValue, setDebouncedValue] = useState(value)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handler = <span class="built_in">window</span>.setTimeout(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setDebouncedValue(value)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [value, delay])</span><br><span class="line">  <span class="keyword">return</span> debouncedValue</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useDebounce;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useDebounce <span class="keyword">from</span> <span class="string">&#x27;./useDebounce&#x27;</span></span><br><span class="line"><span class="keyword">const</span> useDebounceValue = useDebounce(inputValue, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// 此时只要 把 之前的 表单value 全部换成 useDebounceValue就行了</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useThrottle"><a href="#useThrottle" class="headerlink" title="useThrottle"></a>useThrottle</h2><ul>
<li>节流<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useEffect, useRef,useCallback&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useThrottle</span>(<span class="params">fn, delay, dep = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; current &#125; = useRef(&#123; fn, <span class="attr">timer</span>: <span class="literal">null</span> &#125;);</span><br><span class="line">  useEffect(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    current.fn = fn;</span><br><span class="line">  &#125;, [fn]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> useCallback(<span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!current.timer) &#123;</span><br><span class="line">      current.timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> current.timer;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">      current.fn.call(<span class="built_in">this</span>, ...args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, dep);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useThrottle</span><br></pre></td></tr></table></figure></li>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useThrottle <span class="keyword">from</span> <span class="string">&#x27;./useThrottle&#x27;</span></span><br><span class="line"><span class="keyword">const</span> throttledFunc = useThrottle(fn, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useVirtualList"><a href="#useVirtualList" class="headerlink" title="useVirtualList"></a>useVirtualList</h2><ul>
<li><p>虚拟列表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 虚拟列表</span></span><br><span class="line"><span class="keyword">import</span> &#123; RefObject, useEffect, useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">interface Args <span class="keyword">extends</span> IntersectionObserverInit &#123;</span><br><span class="line">  freezeOnceVisible?: boolean</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ReactRef&#125;</span> </span>elementRef 传入虚拟列表父盒子的 ref</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span></span></span><br><span class="line"><span class="comment"> * threshold         阀值 0-1 1表示完全出现在屏幕可视区域才触发</span></span><br><span class="line"><span class="comment"> * root              表示指定根元素 默认为浏览器视口  用于检查目标可见性</span></span><br><span class="line"><span class="comment"> * rootMargin        root的外边距 &#x27;0 0 0 0&#x27;  </span></span><br><span class="line"><span class="comment"> * freezeOnceVisible 是否缓存 再次滑动不重新渲染</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>entry 这个对象具有当前可视区的信息 </span></span><br><span class="line"><span class="comment"> * 例如 entry.isIntersecting 是否在可视区范围</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useVirtualList</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  elementRef: RefObject&lt;Element&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    threshold = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    root = <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    rootMargin = <span class="string">&#x27;0%&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    freezeOnceVisible = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: Args</span></span></span><br><span class="line"><span class="params"><span class="function"></span>): <span class="title">IntersectionObserverEntry</span> | <span class="title">undefined</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> [entry, setEntry] = useState&lt;IntersectionObserverEntry&gt;()</span><br><span class="line">  <span class="keyword">const</span> frozen = entry?.isIntersecting &amp;&amp; freezeOnceVisible</span><br><span class="line">  <span class="keyword">const</span> updateEntry = ([entry]: IntersectionObserverEntry[]): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    setEntry(entry)</span><br><span class="line">  &#125;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> node = elementRef?.current</span><br><span class="line">    <span class="keyword">const</span> hasIOSupport = !!<span class="built_in">window</span>.IntersectionObserver</span><br><span class="line">    <span class="keyword">if</span> (!hasIOSupport || frozen || !node) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> observerParams = &#123; threshold, root, rootMargin &#125;</span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(updateEntry, observerParams)</span><br><span class="line">    observer.observe(node)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> observer.disconnect()</span><br><span class="line">  &#125;, [elementRef, <span class="built_in">JSON</span>.stringify(threshold), root, rootMargin, frozen])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> entry</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useVirtualList </span><br></pre></td></tr></table></figure></li>
<li><p>使用方式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只要判断entry是true还是false就可以得知 他是不是在可视区了</span></span><br><span class="line"><span class="keyword">const</span> Section = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> entry = useVirtualList(ref, &#123;&#125;)</span><br><span class="line">  <span class="comment">// !! 将它转成布尔值 </span></span><br><span class="line">  <span class="keyword">const</span> isVisible = !!entry?.isIntersecting</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Render Section <span class="subst">$&#123;props.title&#125;</span>`</span>, &#123; isVisible &#125;)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">      <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">minHeight:</span> &#x27;<span class="attr">100vh</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">display:</span> &#x27;<span class="attr">flex</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">border:</span> &#x27;<span class="attr">1px</span> <span class="attr">dashed</span> #<span class="attr">000</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">fontSize:</span> &#x27;<span class="attr">2rem</span>&#x27;,</span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27;</span></span></span><br><span class="line"><span class="tag"><span class="xml">      &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="xml">    &gt;</span></span></span><br><span class="line"><span class="xml">      &#123;</span></span><br><span class="line"><span class="xml">        isVisible ? (</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> &#x27;<span class="attr">auto</span>&#x27; &#125;&#125;&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        ) : &quot;&quot;</span></span><br><span class="line"><span class="xml">      &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="number">100</span> &#125;).map(<span class="function">(<span class="params">_, index</span>) =&gt;</span> (</span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">Section</span> <span class="attr">key</span>=<span class="string">&#123;index</span> + <span class="attr">1</span>&#125; <span class="attr">title</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">index</span> + <span class="attr">1</span>&#125;`&#125; /&gt;</span></span></span><br><span class="line"> ))</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useScrollPostion"><a href="#useScrollPostion" class="headerlink" title="useScrollPostion"></a>useScrollPostion</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取滚动条高度</span></span><br><span class="line"><span class="keyword">import</span> &#123;useState,useEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useScrollPostion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [scrollPosition, setScrollPostion] = useState(<span class="number">0</span>)</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      setScrollPostion(<span class="built_in">window</span>.scrollY)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.removeEventListener(<span class="string">&#x27;scroll&#x27;</span>, handleScroll)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,[])</span><br><span class="line">  <span class="keyword">return</span> scrollPosition</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScrollPostion</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useScrollPostion form <span class="string">&#x27;./useScrollPostion&#x27;</span></span><br><span class="line"><span class="keyword">const</span> position = useScrollPostion() </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useWinSize"><a href="#useWinSize" class="headerlink" title="useWinSize"></a>useWinSize</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取屏幕尺寸</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useCallback, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useWinSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = useState(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> onResize = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setSize(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">      <span class="attr">height</span>: <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, [])</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, onResize)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;reisze&#x27;</span>, onResize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useWinSize</span><br></pre></td></tr></table></figure>
<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useWinSize form <span class="string">&#x27;./useWinSize&#x27;</span></span><br><span class="line"><span class="keyword">const</span> size = useWinSize()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="useIsVisible"><a href="#useIsVisible" class="headerlink" title="useIsVisible"></a>useIsVisible</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否在可视区</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> OPTIONS = &#123;</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">rootMargin</span>: <span class="string">&quot;0px 0px 0px 0px&quot;</span>,</span><br><span class="line">  <span class="attr">threshold</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useIsVisible = <span class="function">(<span class="params">elementRef</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [isVisible, setIsVisible] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (elementRef.current) &#123;</span><br><span class="line">      <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line">        entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line">            setIsVisible(<span class="literal">true</span>);</span><br><span class="line">            observer.unobserve(elementRef.current);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, OPTIONS);</span><br><span class="line">      observer.observe(elementRef.current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [elementRef]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isVisible;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useIsVisible;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方式<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elemRef = useRef();</span><br><span class="line"><span class="keyword">const</span> isVisible = useVisible(elemRef);</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> &quot;<span class="attr">145vh</span>&quot;, <span class="attr">width:</span> &#x27;<span class="attr">100</span>%&#x27; &#125;&#125;&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;elemRef&#125;</span>&gt;</span>hello &#123;isVisible &amp;&amp; console.log(&quot;visible&quot;)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="forceUpdate"></a>forceUpdate</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ignored, forceUpdate] = useReducer(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  forceUpdate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line">组件名.forceUpdate(callback)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript</title>
    <url>/eternallycyf/TypeScript/</url>
    <content><![CDATA[<h2 id="1-准备阶段"><a href="#1-准备阶段" class="headerlink" title="1. 准备阶段"></a>1. 准备阶段</h2><h3 id="安装TypeScript基本环境"><a href="#安装TypeScript基本环境" class="headerlink" title="安装TypeScript基本环境"></a>安装TypeScript基本环境</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">npm i typescript -g</span><br><span class="line"># 生成ts配置文件</span><br><span class="line">tsc --init</span><br><span class="line"># 手动解析ts文件</span><br><span class="line">tsc xxx.ts </span><br><span class="line"># 监视ts 实时转换js文件</span><br><span class="line">- 在vscode里面终端 输入</span><br><span class="line">  - ctrl+shift+b</span><br><span class="line">  - 监视tsc</span><br><span class="line">- 或者在菜单-终端-运行任务-监视tsconfig.json</span><br></pre></td></tr></table></figure>

<h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">如果定义的时候没有赋值，不管之后有没有赋值，</span><br><span class="line">都会被推断成 <span class="built_in">any</span> 类型而完全不被类型检查：</span><br><span class="line">如果定义的时候赋值了  就推断成这个格式</span><br></pre></td></tr></table></figure>

<h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// 开启js提示</span></span><br><span class="line">    <span class="string">&quot;allowJs&quot;</span>: <span class="literal">true</span>,        </span><br><span class="line">    <span class="comment">// 指定压缩代码生成的目录 随便一个不存在的路径就行</span></span><br><span class="line">    <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./random&quot;</span>,   </span><br><span class="line">    <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 自动生成 .d.ts 文件 类型校验</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="declare"><a href="#declare" class="headerlink" title="declare"></a>declare</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局类型标注</span></span><br><span class="line"><span class="comment">// 声明不存在的sdk 避免报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.css&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.less&#x27;</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;*.png&#x27;</span>;</span><br><span class="line"><span class="keyword">interface</span> jQuery &#123;&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="built_in">module</span> <span class="string">&#x27;jquery&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> = jQuery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-TS基础"><a href="#2-TS基础" class="headerlink" title="2. TS基础"></a>2. TS基础</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td></td>
</tr>
<tr>
<td>number</td>
<td></td>
</tr>
<tr>
<td>string</td>
<td>推荐单引号</td>
</tr>
<tr>
<td>Array</td>
<td>Array<number>  || number [ ]  || string [ ] || Array<T></td>
</tr>
<tr>
<td>tuple</td>
<td>元组 固定长度的数组</td>
</tr>
<tr>
<td>Object</td>
<td>任意的JS对象 但是不能调用其他方法 即便它真的有</td>
</tr>
<tr>
<td>any</td>
<td>任意类型</td>
</tr>
<tr>
<td>unknown</td>
<td>类型安全的any    区别是any会把别的也推断成any 他只推断自己</td>
</tr>
<tr>
<td>null</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>undefined</td>
<td>可以赋给其他类型变量  但如果–strictNullChecks 就只能给自己</td>
</tr>
<tr>
<td>void</td>
<td>表示没有任何类型   函数没有返回值他的类型就是void</td>
</tr>
<tr>
<td>never</td>
<td>没有值 不能是任何值: 用于函数没有返回值 例如只用于报错的函数</td>
</tr>
</tbody></table>
<h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><table>
<thead>
<tr>
<th>数据类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>?:</td>
<td>可选属性</td>
</tr>
<tr>
<td>!:</td>
<td>非空断言 =&gt; ?.</td>
</tr>
<tr>
<td>readonly</td>
<td>只读</td>
</tr>
<tr>
<td>[xxx:string ]:any</td>
<td>不规定后续内容类型</td>
</tr>
<tr>
<td>enum</td>
<td>枚举 只能赋值为  undefined 和 null</td>
</tr>
<tr>
<td>元组</td>
<td>let x: [number, string] = [10, “jack”]</td>
</tr>
<tr>
<td>|</td>
<td>联合类型                  只能同时为一种</td>
</tr>
<tr>
<td>&amp;</td>
<td>交叉类型                  合并</td>
</tr>
<tr>
<td>Partial</td>
<td>可选类型合并          Partial &lt;xxx &amp; xxx&gt;</td>
</tr>
</tbody></table>
<h2 id="3-基本API"><a href="#3-基本API" class="headerlink" title="3. 基本API"></a>3. 基本API</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 变量: 数据类型</span><br><span class="line"><span class="keyword">var</span> hello: <span class="built_in">string</span> =  <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"># 对象: &#123;对象属性: 数据类型 , ...&#125; = &#123; xxx&#125;</span><br><span class="line"><span class="keyword">var</span> user: &#123;<span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>&#125;=&#123; <span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>: <span class="number">15</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj= &#123;<span class="attr">name</span>:<span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="comment">// 任意类型 =&gt; 泛型</span></span><br><span class="line"><span class="keyword">var</span> c:&#123;<span class="attr">name</span>:<span class="built_in">string</span>,[xxx: <span class="built_in">string</span>]:<span class="built_in">any</span>&#125;;</span><br><span class="line"># 数组</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">	[index: <span class="built_in">number</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指定某一个数组下的 每一个对象的属性</span></span><br><span class="line">dataSource?: [&#123; [key: <span class="built_in">number</span>]: Interface &#125;]</span><br><span class="line"><span class="comment">// 或者这样</span></span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br></pre></td></tr></table></figure>

<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动指定某一个值的类型</span></span><br><span class="line"><span class="number">1.</span>值 <span class="keyword">as</span> 类型 </span><br><span class="line">(someValue <span class="keyword">as</span> <span class="built_in">string</span>)  React-jsx必须用这个</span><br><span class="line"><span class="number">2.</span>&lt;类型&gt;值  </span><br><span class="line">(&lt;<span class="built_in">string</span>&gt;someValue)      </span><br></pre></td></tr></table></figure>

<h3 id="type"><a href="#type" class="headerlink" title="type"></a>type</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 接口也可以用</span></span><br><span class="line"><span class="comment">// type str = 接口1 | 接口2</span></span><br><span class="line"><span class="keyword">var</span> str: str = <span class="string">&quot;10&quot;</span></span><br><span class="line">str = <span class="number">10</span></span><br><span class="line"># 限制固定常量</span><br><span class="line"><span class="keyword">type</span> sex = <span class="string">&#x27;男&#x27;</span> | <span class="string">&#x27;女&#x27;</span></span><br><span class="line"># 函数别名</span><br><span class="line"><span class="keyword">type</span> newType = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">s: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> sum2: newType = sum</span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">// 可选</span></span><br><span class="line">name?:<span class="built_in">number</span></span><br><span class="line"><span class="comment">// 默认值</span></span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span> = <span class="number">20</span></span><br><span class="line"># 函数的重载</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">name:<span class="built_in">string</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">age:<span class="built_in">number</span></span>):<span class="title">string</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">s:<span class="built_in">any</span></span>):<span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> s===<span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我叫:&#x27;</span>+s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我的年龄是&#x27;</span>+s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="string">&#x27;张三&#x27;</span>));   <span class="comment">//正确</span></span><br><span class="line"> <span class="built_in">console</span>.log(getInfo(<span class="number">20</span>));   <span class="comment">//正确</span></span><br><span class="line"><span class="comment">// console.log(getInfo(true));    //错误写法 ts编译报错</span></span><br></pre></td></tr></table></figure>

<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 用于取值 并限定在一定范围  =&gt;  会被编译成一个双向映射的对象</span></span><br><span class="line"> <span class="comment">// 默认从0开始递增 直到枚举进行反向映射</span></span><br><span class="line"><span class="built_in">enum</span> Days &#123;</span><br><span class="line">  Sun = <span class="number">3</span>,  <span class="comment">// 一个设置值 其他也要设置</span></span><br><span class="line">  Mon,</span><br><span class="line">  Tue,</span><br><span class="line">  Wed,</span><br><span class="line">  Thu,</span><br><span class="line">  Fri,</span><br><span class="line">  Sat</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> xxx = Days.Sun</span><br><span class="line"># 常量枚举</span><br><span class="line"><span class="keyword">const</span> dnum xxx &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-inerface"><a href="#4-inerface" class="headerlink" title="4. inerface"></a>4. inerface</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># base</span><br><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span> | <span class="built_in">number</span>,  <span class="comment">// 只读    </span></span><br><span class="line">   age?: <span class="built_in">number</span>,                   <span class="comment">// 可选</span></span><br><span class="line">   [propsName: <span class="built_in">string</span>]: <span class="built_in">any</span>        <span class="comment">// 任意属性个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user: Person = &#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&quot;zhuangsan&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"># 接口嵌套</span><br><span class="line"><span class="keyword">interface</span> TestArr &#123;</span><br><span class="line">  <span class="attr">username</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> arr &#123;</span><br><span class="line">  [xx: <span class="built_in">number</span>]: TestArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr: arr = [&#123; <span class="attr">username</span>: <span class="string">&#x27;ss&#x27;</span>, <span class="attr">password</span>: <span class="number">555</span> &#125;]</span><br><span class="line"># 函数接口</span><br><span class="line"><span class="keyword">interface</span> aa &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span>): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fm:aa = <span class="function"><span class="keyword">function</span>(<span class="params">name:<span class="built_in">string</span>,age:<span class="built_in">number</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"># 接口继承</span><br><span class="line"><span class="keyword">interface</span> 接口内的方法 entends 接口名&#123; &#125;</span><br><span class="line"># 接口实现</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="title">implements</span> 接口名</span>&#123; &#125;</span><br><span class="line"># 泛型结函数</span><br><span class="line"><span class="keyword">interface</span> Icreate&lt;T&gt;&#123;</span><br><span class="line">  (a:T,<span class="attr">b</span>:T):T</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a: Icreate&lt;<span class="built_in">number</span>&gt; = 函数</span><br></pre></td></tr></table></figure>

<h2 id="5-泛型"><a href="#5-泛型" class="headerlink" title="5. 泛型"></a>5. 泛型</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># </span><br><span class="line">指不预先指定具体类型 而使用时候再指定 的一种特性</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123; <span class="keyword">return</span> arg &#125; </span><br><span class="line">echo(<span class="string">&#x27;4&#x27;</span>)  echo&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">data: [T, U]</span>): [<span class="title">U</span>, <span class="title">T</span>] </span>&#123; &#125;</span><br><span class="line">T[]</span><br><span class="line"># 约束泛型</span><br><span class="line"><span class="keyword">interface</span> Inter &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Inter</span>&gt;(<span class="params">a: T</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.length</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>)  <span class="comment">// 报错 数字没有.length 必须要有.length</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 与接口结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &lt;T,U&gt; &#123;</span><br><span class="line">  <span class="attr">name</span>:T;</span><br><span class="line">  age:U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test:Icreate&lt;<span class="built_in">number</span>,<span class="built_in">string</span>&gt; = &#123;<span class="attr">name</span>:<span class="number">5</span>，age=<span class="string">&quot;ss&quot;</span>&#125;</span><br><span class="line"># 与函数的结合</span><br><span class="line"><span class="keyword">interface</span> Icreate &#123;</span><br><span class="line">  &lt;T&gt;(name: <span class="built_in">string</span>, <span class="attr">value</span>: T): <span class="built_in">Array</span>&lt;T&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> aaaaaa: Icreate;</span><br><span class="line">aaaaaa = <span class="function"><span class="keyword">function</span> &lt;<span class="title">T</span>&gt;(<span class="params">name: <span class="built_in">string</span>, value: T</span>): <span class="title">Array</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa: <span class="built_in">number</span>[] = aaaaaa(<span class="string">&quot;zzhang&quot;</span>, <span class="number">5</span>)</span><br><span class="line"># 与类的结合</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="attr">name</span>: T;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name:T</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xxx = <span class="keyword">new</span> Person&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;张三&#x27;</span>)  </span><br></pre></td></tr></table></figure>

<h2 id="6-class"><a href="#6-class" class="headerlink" title="6. class"></a>6. class</h2><h3 id="js"><a href="#js" class="headerlink" title="js"></a>js</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">#私有属性</span><br></pre></td></tr></table></figure>



<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 遍历属性</span><br><span class="line"><span class="built_in">Object</span>.kes(实例名).forEach(<span class="function"><span class="params">key</span>=&gt;</span>实例名[key])</span><br><span class="line"># 遍历方法</span><br><span class="line">className.prototype 不能通过 forEach遍历 <span class="comment">// 构造函数 可以</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames([className].prototype)</span><br><span class="line">  .forEach(<span class="function"><span class="params">item</span>=&gt;</span>[className].prototype[item])</span><br></pre></td></tr></table></figure>

<h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> aaa = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 匿名</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bbb = <span class="class"><span class="keyword">class</span> <span class="title">ccc</span> </span>&#123;</span><br><span class="line">  ccc.name</span><br><span class="line">  <span class="comment">// 只有内部可以访问ccc</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4个状态"><a href="#4个状态" class="headerlink" title="4个状态"></a>4个状态</h3><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">实例和父类能都访问</span><br></pre></td></tr></table></figure>

<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能父类点出来</span></span><br><span class="line"><span class="comment">// 类似于直接在 Person.prototype.aaaa = &#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="comment">//  constructor() &#123; this.bbb = 12; &#125;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> aaaa: <span class="built_in">string</span> = <span class="string">&#x27; 孙悟空&#x27;</span>;</span><br><span class="line">  bbb: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person()</span><br><span class="line"><span class="built_in">console</span>.log(Person.aaaa)</span><br></pre></td></tr></table></figure>

<h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private    私有的         外界无法访问 不能被继承</span></span><br><span class="line">为了避免直接修改 <span class="class"><span class="keyword">class</span>中的属性 产生数据混乱</span></span><br><span class="line"><span class="class">用<span class="title">private</span> 定义属性 拒绝外界访问</span></span><br><span class="line"><span class="class">同时在<span class="title">class</span>内部 定义 <span class="title">getter</span> <span class="title">setter</span> 向外界开放 获取和修改的方法</span></span><br><span class="line"><span class="class">内部可以设计 方法的权限 </span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// protected  受保护的       外界无法访问 可以被继承</span></span><br></pre></td></tr></table></figure>

<h3 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> ccc: <span class="built_in">string</span> = <span class="string">&#x27;ss&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="get-set"><a href="#get-set" class="headerlink" title="get set"></a>get set</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 手动定义 获取和更改方法 的computed </span></span><br><span class="line"><span class="comment">// get 定义的 可以直接点出来 不用调方法</span></span><br><span class="line"><span class="comment">// 如果不是关键字 get 就得使用定义的方法修改</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">_name: <span class="built_in">string</span>, _age: <span class="built_in">number</span> = <span class="number">10</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._name = _name;</span><br><span class="line">    <span class="built_in">this</span>._age = _age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">age</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._age</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">age</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>._age = value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">10</span>)</span><br><span class="line">per.age = <span class="number">200</span></span><br><span class="line"><span class="built_in">console</span>.log(per) <span class="comment">//10</span></span><br></pre></td></tr></table></figure>

<h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><h4 id="constructor"><a href="#constructor" class="headerlink" title="constructor"></a>constructor</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br><span class="line"># 或者</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>,<span class="keyword">public</span> age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per: Person = <span class="keyword">new</span> Person(<span class="string">&#x27;2&#x27;</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sss&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, <span class="keyword">type</span>: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, age);</span><br><span class="line">    <span class="built_in">this</span>.type = <span class="keyword">type</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">sayHi</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.sayHi()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Cat(<span class="string">&#x27;as&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;asd&#x27;</span>).sayHi()</span><br></pre></td></tr></table></figure>

<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">子类重写方法 在子类中 会覆盖父类的方法</span><br><span class="line"><span class="comment">// 如果要加属性 必须写super 重写属性</span></span><br></pre></td></tr></table></figure>

<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># <span class="keyword">implements</span>  需要重写属性和方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">implements</span> 接口</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不用定义 super() 可以重写 属性和方法</span></span><br></pre></td></tr></table></figure>

<h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 抽象类 禁止被实例化 用来被继承的</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"># 父类指定结构 子类来实现 避免忘记重写方法导致使用默认的方法</span><br><span class="line"><span class="comment">// 抽象方法只能以abstract开头 没有方法体 </span></span><br><span class="line"><span class="comment">// 只能定义在抽象类里面 子类必须重写</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"> <span class="keyword">abstract</span> sayHi():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-高级API"><a href="#7-高级API" class="headerlink" title="7. 高级API"></a>7. 高级API</h2><h3 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a>Partial</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可选类型</span></span><br><span class="line">Partial &lt;xxx &amp; xxx&gt;</span><br></pre></td></tr></table></figure>

<h3 id="omit"><a href="#omit" class="headerlink" title="omit"></a>omit</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 忽视重写某个属性 </span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> Omit&lt;A, &#x27;a&#x27;&gt; &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个对象的 key 和 value</span></span><br><span class="line"><span class="keyword">type</span> keys = <span class="string">&#x27;A&#x27;</span> | <span class="string">&#x27;B&#x27;</span> | <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">const</span> result: Record&lt;keys, <span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">A</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">B</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">C</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动推断后续的属性</span></span><br></pre></td></tr></table></figure>

<h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ChinaMobilePhones = <span class="string">&#x27;10086&#x27;</span> | <span class="string">&#x27;10010&#x27;</span> | <span class="string">&#x27;10000&#x27;</span></span><br><span class="line"><span class="keyword">interface</span> ChinaMobile &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  website: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> ChinaMobileList = &#123;</span><br><span class="line">  [phone <span class="keyword">in</span> ChinaMobilePhones]: ChinaMobile</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Application</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  set&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T, <span class="attr">val</span>: keys[T]) &#123; &#125;</span><br><span class="line">  get&lt;T <span class="keyword">extends</span> keyof keys&gt;(key: T): <span class="built_in">void</span> &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="8-工具函数"><a href="#8-工具函数" class="headerlink" title="8. 工具函数"></a>8. 工具函数</h2><h3 id="覆盖接口类型"><a href="#覆盖接口类型" class="headerlink" title="覆盖接口类型"></a>覆盖接口类型</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># 覆盖接口属性</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns object T, but with T[K] overridden to type U.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@example</span></span></span><br><span class="line"><span class="comment"> * type MyObject = &#123; a: number, b: string &#125;</span></span><br><span class="line"><span class="comment"> * OverrideProperty&lt;MyObject, &quot;a&quot;, string&gt; // returns &#123; a: string, b: string &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> OverrideProperty&lt;T, K <span class="keyword">extends</span> keyof T, U&gt; = Omit&lt;T, K&gt; &amp; &#123; [P <span class="keyword">in</span> keyof Pick&lt;T, K&gt;]: U &#125;;</span><br><span class="line"># 第二种方法</span><br><span class="line"><span class="keyword">type</span> Modify&lt;T, R&gt; = Omit&lt;T, keyof R&gt; &amp; R;</span><br></pre></td></tr></table></figure>

<h2 id="9-react接口"><a href="#9-react接口" class="headerlink" title="9. react接口"></a>9. react接口</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"># react组件接口</span><br><span class="line"><span class="keyword">import</span> React, &#123; FC, ButtonHTMLAttributes, AnchorHTMLAttributes &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span>:<span class="title">FC</span>&lt;泛型&gt; <span class="keyword">extends</span> <span class="title">React</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"># react组件props接口</span><br><span class="line">React.ComponentProps&lt;<span class="string">&#x27;button&#x27;</span>&gt;</span><br><span class="line"># css</span><br><span class="line">React.CSSProperties</span><br><span class="line"># children</span><br><span class="line">React.FunctionComponentElement</span><br><span class="line"># 事件</span><br><span class="line">onChange?: <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"># promise</span><br><span class="line">Promist&lt;<span class="built_in">string</span>[]&gt;</span><br><span class="line"># 键盘事件</span><br><span class="line"><span class="attr">e</span>:React.KeyboardEvent</span><br><span class="line"># ref</span><br><span class="line">React.RefObject&lt;HTMLElement&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>用在线vscode打开github仓库</title>
    <url>/eternallycyf/%E7%94%A8%E5%9C%A8%E7%BA%BFvscode%E6%89%93%E5%BC%80github%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>作为一个 <code>github</code> 的使用者。。。我竟然不知道 略显尴尬</li>
<li>之前一直是通过 chrome 插件 <code>Octotree-Github code tree</code>  来查看仓库文件结构</li>
<li>和 <code>vscode</code> 打开 简直 <code>low</code> 暴了</li>
<li>如果你也不知道那就赶紧来试试吧</li>
</ul>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul>
<li><ol>
<li>直接在网址 xxx.github.com 的 github 后面加 <code>1s</code></li>
</ol>
<ul>
<li>例如: <a href="https://github.com/conwnet/github1s">https://github.com/conwnet/github1s</a></li>
<li>To: <a href="https://github1s.com/conwnet/github1s">https://github1s.com/conwnet/github1s</a></li>
</ul>
</li>
<li><ol start="2">
<li>直接按中文的 句号按钮</li>
</ol>
<ul>
<li>有的网址可以有的网址不行</li>
</ul>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/conwnet/github1s">github1s</a></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的GitHub-Badge</title>
    <url>/eternallycyf/%E6%9C%89%E8%B6%A3%E7%9A%84GitHub-Badge/</url>
    <content><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>大家一定在浏览 <code>github</code> 的时候有看到过这样漂亮的徽标</li>
<li>其实他的使用方式也非常简单</li>
<li><img class="inline-img" src="/img/badge.jpg" style="height:300px"/></li>
</ul>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul>
<li><a href="https://simpleicons.org/">Simple Icons官网图标列表</a><ul>
<li>这里可以看到各式各样的图标</li>
<li>而他的名字就是后续配置需要的logo名</li>
<li>此外基础配色也最好以它的为准 比较美观</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 字段配置如下</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//shields.io/badge/左边文字-右边文字-右边颜色?logo=图标名称&amp;logoColor=ffffff&amp;style=样式</span></span><br><span class="line"># demo =&gt; github 徽标</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//img.shields.io/badge/-fff?style=flat-square&amp;logo=Github&amp;logoColor=000</span></span><br></pre></td></tr></table></figure>

<ul>
<li>此外。还有些细节配置<ul>
<li>徽章实体风格: <code>style= plastic | flat | flag-square | for-the-badge | social</code></li>
<li>外观有不同的效果 自己可以挨个尝试下</li>
</ul>
</li>
<li>其次 <code>badge</code> 后边 也可以直接跟一个 <code>svg</code> 地址 </li>
</ul>
<h2 id="github主页使用"><a href="#github主页使用" class="headerlink" title="github主页使用"></a>github主页使用</h2><ul>
<li>创建一个和自己<code>github</code>名字 同名的仓库</li>
<li>在这个仓库里创建 <code>README.md</code></li>
<li>在这个里面的内容就自动展示在首页啦</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>一篇搞懂Webpack常用的配置</title>
    <url>/eternallycyf/%E4%B8%80%E7%AF%87%E6%90%9E%E6%87%82%20Webpack%20%E5%B8%B8%E7%94%A8%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-认识-Webpack"><a href="#1-认识-Webpack" class="headerlink" title="1.认识 Webpack"></a>1.认识 Webpack</h2><h3 id="Webpack-是什么"><a href="#Webpack-是什么" class="headerlink" title="Webpack 是什么?"></a>Webpack 是什么?</h3><ul>
<li><a href="https://webpack.docschina.org/concepts/">官方的定义</a><ul>
<li><code>Webpack</code> 是一个用于现代 <code>JavaScript</code> 应用程序的 静态模块打包工具。</li>
<li>当<code>Webpack</code> 处理应用程序时，</li>
<li>它会在内部从一个或多个入口点构建一个 依赖图(<code>dependency graph</code>)</li>
<li>然后将你项目中所需的每一个模块组合成一个或多个 <code>bundles</code>，它们均为静态资源，用于展示你的内容</li>
</ul>
</li>
<li>简单的说<ul>
<li>之前<ul>
<li>在<code>2010</code>年左右,前端当时还是利用 <code>jQuery</code> 进行开发</li>
<li>后端利用 <code>php jsp</code> 等技术将数据库的数据渲染到前端的页面上</li>
<li>前后端开始是耦合的 维护和开发 都是一个不规范 繁琐的流程</li>
</ul>
</li>
<li>现在<ul>
<li>当三大框架的横行后 逐渐以<code>MVVM</code>(<code>Model-View-ViewModel</code>)模式来 </li>
<li>减少繁琐的 <code>DOM</code> 操作,以数据来驱动视图的变化,更加利于维护和开发</li>
</ul>
</li>
<li>为什么使用<ul>
<li>原生<code>js</code>不会提供所有的特性, 因此就需要引入各种插件</li>
<li>而<code>Webpack</code>就是大一统的集成方案</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Webpack-可以做什么"><a href="#Webpack-可以做什么" class="headerlink" title="Webpack 可以做什么"></a>Webpack 可以做什么</h3><ul>
<li>使用<code>Webpack</code>作为前端构建工具通常可以做到以下几个方面的事情<ul>
<li>代码转换: <code>TypeScript</code>编译成<code>JavaScript</code>、<code>SCSS</code>编译成<code>CSS</code>等。</li>
<li>文件优化: 压缩<code>JavaScript</code>、<code>CSS</code>、<code>HTML</code>代码，压缩合并图片等。</li>
<li>代码分割: 提取多个页面的公共代码、提取首屏不需要执行部分的代码让其异步加载。</li>
<li>模块合并: 在采用模块化的项目里会有很多个模块和文件，需要构建功能把模块分类合并成一个文件。</li>
<li>自动刷新: 监听本地源代码的变化，自动重新构建、刷新浏览器页面，通常叫做模块热替换<code>HMR</code>。</li>
<li>代码校验: 在代码被提交到仓库前需要校验代码是否符合规范，以及单元测试是否通过。</li>
<li>自动发布: 更新完代码后，自动构建出线上发布代码并传输给发布系统。</li>
</ul>
</li>
</ul>
<h2 id="2-搭建-Webpack"><a href="#2-搭建-Webpack" class="headerlink" title="2.搭建 Webpack"></a>2.搭建 Webpack</h2><h3 id="搭建基本环境"><a href="#搭建基本环境" class="headerlink" title="搭建基本环境"></a>搭建基本环境</h3><ul>
<li>安装最新的环境, 新建一个文件夹叫 <code>test</code></li>
<li><code>test</code> 根路径下载基本的依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli --save-dev</span><br><span class="line">yarn add webpack-dev-server -D</span><br><span class="line">yarn add html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></li>
<li>在 <code>test/package.json</code> 文件添加启动和打包的 <code>shell</code> 命令<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;serve&quot;: &quot;webpack serve &quot;,</span><br><span class="line">    &quot;build&quot;: &quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
<li>新建基本的文件<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># dist 目录不用手动创建 这个是打包自动生成的</span><br><span class="line">|-- node_modules</span><br><span class="line">├── dist</span><br><span class="line">│   └── main.js</span><br><span class="line">├── public</span><br><span class="line">│   └── index.html</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   └── index.js</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure></li>
<li>在 webpack.config.js 文件写入基本的配置<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 这些配置后面会具体解释 这里主要配置了打包的出口文件和入口文件</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>此时就完成了基本的搭建,可以来使用shell语句测试一下效果了</blockquote>

<ul>
<li>在 <code>/src/index.js</code> 写入 <code>console.log(&#39;Hello Webpck&#39;);</code></li>
<li>然后在项目根路径执行之前在<code>package.json</code>定义的<code>shell</code>命令 </li>
<li><code>yarn build</code> 就在在 <code>/dist/main.js</code> 发现转换后的代码了</li>
<li>但是目前还是不能展示html页面 和 启动服务</li>
<li>在下一阶段就将安装两个必要的插件</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(&#x27;Hello Webpck&#x27;);\n\n//# sourceURL=webpack:///./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> 	&#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> 	__webpack_modules__[<span class="string">&quot;./src/index.js&quot;</span>]();</span><br><span class="line"><span class="comment">/******/</span> 	</span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h2 id="3-配置插件"><a href="#3-配置插件" class="headerlink" title="3.配置插件"></a>3.配置插件</h2><h3 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h3><ul>
<li>自己可以去<code>npm</code> 搜索各种<code>loader</code> 获取更多具体的配置</li>
<li>这里仅仅配置了我用过的常用配置</li>
<li><a href="https://www.npmjs.com/search?q=loader">npm-loader</a></li>
<li>配置插件章节的项目最终结构</li>
</ul>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   └── public</span><br><span class="line">│       ├── assets</span><br><span class="line">│       │   └── images</span><br><span class="line">│       │       └── 99b6d6d0aac2e1ab068e.png</span><br><span class="line">│       └── <span class="keyword">static</span></span><br><span class="line">│           └── e7c3da3c784524f42673.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── avatar.png</span><br><span class="line">│   └── index.html</span><br><span class="line">├── src</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   └── index.less</span><br><span class="line">└── webpack.config.js</span><br></pre></td></tr></table></figure>

<h4 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">./public/index.html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  html5</span><br><span class="line">  &lt;img id=<span class="string">&#x27;im&#x27;</span> src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./src/index.js</span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;../public/avatar.png&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"><span class="keyword">const</span> im = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;im&#x27;</span>)</span><br><span class="line">im.src = avatar</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpck&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> aaaa = <span class="function">() =&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(aaaa);</span><br></pre></td></tr></table></figure>

<h4 id="index-less"><a href="#index-less" class="headerlink" title="index.less"></a>index.less</h4><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"># ./<span class="selector-tag">src</span>/<span class="selector-tag">index</span><span class="selector-class">.less</span></span><br><span class="line">@<span class="selector-tag">myColor</span>: <span class="selector-tag">blue</span>;</span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">@myColor</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># ./webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定打包后输出的文件夹 ./dist/public/assets/images</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;public/assets/images/[hash][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.html/,</span></span><br><span class="line">      <span class="comment">//   type: &#x27;asset/resource&#x27;,</span></span><br><span class="line">      <span class="comment">//   generator: &#123;</span></span><br><span class="line">      <span class="comment">//     filename: &#x27;public/static/[hash][ext][query]&#x27;  // 单独指定名字</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/inline&#x27;</span>  <span class="comment">// inline 的时候不需要指定文件名</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span> <span class="comment">// 4kb  指定大小</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;webpack serve&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;html-webpack-plugin&quot;</span>: <span class="string">&quot;^5.5.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.69.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^4.9.2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@babel/core&quot;</span>: <span class="string">&quot;^7.17.4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>: <span class="string">&quot;^7.16.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.16.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;autoprefixer&quot;</span>: <span class="string">&quot;^10.4.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;babel-loader&quot;</span>: <span class="string">&quot;^8.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;css-loader&quot;</span>: <span class="string">&quot;^6.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less&quot;</span>: <span class="string">&quot;^4.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span>: <span class="string">&quot;^10.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;node-sass&quot;</span>: <span class="string">&quot;^7.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;postcss-loader&quot;</span>: <span class="string">&quot;^6.2.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sass-loader&quot;</span>: <span class="string">&quot;^12.6.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;style-loader&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^4.7.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><ul>
<li>这个插件其实就是一个小型的本地服务器 </li>
<li>相关配置也比较简单</li>
<li>其他的具体配置后面再说 </li>
<li>这时候就可以执行 <code>yarn serve</code></li>
<li>此时还没有配置解析html的插件 因此先手动跳转到 <code>main.js</code> 测试下</li>
<li><code>http://localhost:8088/main.js</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add webpack-dev-server -D</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 打开的端口</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="comment">// 启动服务后自动打开网页</span></span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h3><ul>
<li>这个包显然就是用来解析html的</li>
<li>配置后运行 <code>yarn build</code> 就可以在 <code>dist</code> 目录看到打包后的 <code>index.html</code> 了</li>
<li>同时运行 <code>yarn serve</code> 也可以直接运行解析了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add html-webpack-plugin -D</span><br><span class="line"># 在 ./public/index.html 随便写点东西</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  html5</span><br><span class="line">  &lt;img id=<span class="string">&#x27;im&#x27;</span> src=<span class="string">&quot;&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 要生成的index.html路径 </span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>此时我们完成了基本的架构,现在需要配置各种loader来满足项目的需要</blockquote></li>
</ul>
<h3 id="Asset-Modules"><a href="#Asset-Modules" class="headerlink" title="Asset Modules"></a>Asset Modules</h3><ul>
<li><code>Asset Modules</code> 是一种模块，它允许人们在不配置额外加载器的情况下使用资产文件（字体、图标等）</li>
<li><code>webpack5</code> 不需要再去手动下载三个<code>loader</code>了</li>
<li>在 <code>webpack 5</code> 之前，通常使用:<ul>
<li><code>raw-loader</code>将文件作为字符串导入</li>
<li><code>url-loader</code>将文件作为数据 URI 内联到包中</li>
<li><code>file-loader</code>将文件发送到输出目录</li>
</ul>
</li>
<li><code>Asset Modules</code> 分为4中资源模块<ul>
<li><code>asset/resource</code> 将资源分割为单独的文件，并导出<code>url</code>，就是之前的 <code>file-loader</code>的功能</li>
<li><code>asset/inline</code> 将资源导出为<code>dataURL（url(data:)）</code>的形式，之前的 <code>url-loader</code>的功能</li>
<li><code>asset/source</code> 将资源导出为源码（<code>source code</code>）. 之前的 <code>raw-loader</code> 功能</li>
<li><code>asset</code> 自动选择导出为单独文件或者 <code>dataURL形式（默认为8KB）</code>. 之前有<code>url-loader</code>设置<code>asset size limit</code> 限制实现。</li>
</ul>
</li>
<li>当配置完成后运行 yarn build就会发现 图片也被打包进了dist目录<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 在 ./public 放一张图片 这里选择了avatar.png</span><br><span class="line"># ./src/index.js </span><br><span class="line"><span class="keyword">import</span> avatar <span class="keyword">from</span> <span class="string">&#x27;../public/avatar.png&#x27;</span></span><br><span class="line"><span class="keyword">const</span> im = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;im&#x27;</span>)</span><br><span class="line">im.src = avatar</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello Webpck&#x27;</span>);</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.use</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 指定打包后输出的文件夹 ./dist/public/assets/images</span></span><br><span class="line">    <span class="attr">assetModuleFilename</span>: <span class="string">&#x27;public/assets/images/[hash][ext][query]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    <span class="attr">compress</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">8088</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./public/index.html&#x27;</span>,</span><br><span class="line">      <span class="comment">//要生成的文件名 存在内存 目录中不显示</span></span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:ico|gif|png|jpg|jpeg)$/i</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   test: /\.html/,</span></span><br><span class="line">      <span class="comment">//   type: &#x27;asset/resource&#x27;,</span></span><br><span class="line">      <span class="comment">//   generator: &#123;</span></span><br><span class="line">      <span class="comment">//     filename: &#x27;public/static/[hash][ext][query]&#x27;  // 单独指定名字</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.svg/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset/inline&#x27;</span>  <span class="comment">// inline 的时候不需要指定文件名</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.txt/</span>,</span><br><span class="line">        type: <span class="string">&#x27;asset&#x27;</span>,</span><br><span class="line">        <span class="attr">parser</span>: &#123;</span><br><span class="line">          <span class="attr">dataUrlCondition</span>: &#123;</span><br><span class="line">            <span class="attr">maxSize</span>: <span class="number">4</span> * <span class="number">1024</span> <span class="comment">// 4kb  指定大小</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a>babel-loader</h3><ul>
<li><code>babel-loader</code> 用于转化和识别高级语法</li>
<li>当配置完成后运行 <code>yarn build</code> 可以查看 <code>./dist/main.js</code> 后可以发现<ul>
<li>代码已经将箭头函数转换成了<code>es5</code>了</li>
<li><code>var aaaa = function aaaa() &#123;\n  return 10;\n&#125;;\n\nconsole.log(aaaa);</code></li>
<li>然后注销掉 <code>babel-loader</code> 的规则 重新打包</li>
<li>你会发现 <code>main.js</code> 中还是箭头函数 这就是 <code>babel-loader</code> 的作用之一<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -D babel-loader @babel/core @babel/preset-env </span><br><span class="line">在 ./src/index.js 加入一个 es6 箭头函数</span><br><span class="line"><span class="keyword">const</span> aaaa = <span class="function">() =&gt;</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(aaaa);</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.module.rules.xxx</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">  use: &#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="css-sass-less-postcss-loader"><a href="#css-sass-less-postcss-loader" class="headerlink" title="css,sass,less,postcss loader"></a>css,sass,less,postcss loader</h3><ul>
<li><code>sass less</code> 大家都知道是<code>css</code>的预编译语言就不用多说了</li>
<li><code>postcss</code> 是用于自动添加<code>css</code>的兼容前缀</li>
<li>接下来就一次性安装多个<code>loader</code><ul>
<li>不过注意 <code>node-sass</code> 的上游依赖需要手动配置镜像或代理 否则一直可能下载失败<a class="btn-beautify blue larger" href="https://www.ydyno.com/archives/1219.html" 
  title="node-sass配置镜像"><i class="far fa-hand-point-right"></i><span>node-sass配置镜像</span></a></li>
</ul>
</li>
<li>配置完成后 就可以看到<code>less-loader</code>生效了</li>
<li>其他的<code>loader</code>,可以自己测试下,这里就不测试了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">yarn add style-loader css-loader -D </span><br><span class="line">yarn add less-loader less -D</span><br><span class="line">yarn add sass-loader node-sass -D</span><br><span class="line">yarn add postcss-loader autoprefixer -D</span><br><span class="line"># ./public/index.html </span><br><span class="line">ul&gt;li&#123;$&#125;*<span class="number">3</span></span><br><span class="line"># ./src/index.js</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.less&#x27;</span></span><br><span class="line"># ./src/index.less</span><br><span class="line">@myColor: blue;</span><br><span class="line">li&#123;</span><br><span class="line">  <span class="attr">color</span>: @myColor;</span><br><span class="line">&#125;</span><br><span class="line"># webpack.config.js =&gt; <span class="built_in">module</span>.exports.module.rules.xxx</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;sass-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-configuration"><a href="#4-configuration" class="headerlink" title="4. configuration"></a>4. configuration</h2><h3 id="版本事项"><a href="#版本事项" class="headerlink" title="版本事项"></a>版本事项</h3><blockquote>以下的这些配置基于 webpack 4.x, 当使用webpack5 时可能有一些变动</blockquote>

<p><a href="https://v4.webpack.docschina.org/concepts/">webpack4.x</a><br><a href="https://webpack.docschina.org/concepts/">webpack5</a></p>
<h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># 新建目录src</span><br><span class="line">    默认入口: ./src/index.js</span><br><span class="line">#</span><br><span class="line">  多入口打包 </span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;angular&#x27;</span>: <span class="string">&#x27;./src/2.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"># 根目录创建webpack.config.js</span><br><span class="line"> <span class="comment">// entry: string   生成一个chunk 输出一个 bundle</span></span><br><span class="line"> <span class="comment">// entry: sring[]  生成一个chunk 输出一个 bundle</span></span><br><span class="line"> <span class="comment">// entry: object   有几个入口文件就生成几个 chunk 和 bundle </span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./src/main.js&quot;</span>, </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  默认出口: ./dist/main.js</span><br><span class="line">#</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">output</span>: &#123; </span><br><span class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">    <span class="comment">// 资源公众路径前缀 </span></span><br><span class="line">    <span class="comment">// images/a.jpg =&gt; /images/a.jpg</span></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">chunkFilename</span>: <span class="string">&#x27;js/[name]_chunk.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 整个库向外保留的变量名</span></span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;[name]&#x27;</span></span><br><span class="line">    <span class="comment">// 变量名添加到顶级作用域 global</span></span><br><span class="line">    <span class="attr">libraryTarget</span>: <span class="string">&#x27;window&#x27;</span>            </span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development production&#x27;</span> </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">port</span>: <span class="number">5000</span>,</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">hot</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment"> 本地 :5000 端口服务器接受到 /api/xxx 的请求</span></span><br><span class="line"><span class="comment"> 就会把请求转发到另外一个服务器 :3000</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">       <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求路径重写：将 /api/xxx --&gt; /xxx （去掉/api）</span></span><br><span class="line">       <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">         <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 不显示服务器日志信息</span></span><br><span class="line">  <span class="attr">clientLogLevel</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">  <span class="attr">quiet</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 如果报错 不要全屏提示</span></span><br><span class="line">  <span class="attr">overlay</span>: <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 启动gzip压缩</span></span><br><span class="line">  <span class="attr">compress</span>: <span class="literal">true</span>,  </span><br><span class="line">  <span class="attr">watchContentBase</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">watchOptions</span>: &#123;</span><br><span class="line">          <span class="comment">// 忽略文件</span></span><br><span class="line">          <span class="attr">ignored</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  # <span class="number">4.0</span> webpack</span><br><span class="line">  <span class="comment">// 影响本地资源的访问  express.static</span></span><br><span class="line">  <span class="comment">// 是对 output 打包文件物理存储位置的映射</span></span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/assets/&quot;</span>,</span><br><span class="line">  <span class="comment">// html页面的路径 (默认就是项目根路径) </span></span><br><span class="line">  <span class="comment">// 初始相对路径是webpack.config 如果dist和他同级 </span></span><br><span class="line">  <span class="comment">// contentBase: &#x27;./dist&#x27;</span></span><br><span class="line">  <span class="attr">contentBase</span>: resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  <span class="comment">// 监视 contentBase 目录下的所有文件 文件变化就会 reload</span></span><br><span class="line">  # <span class="number">5.0</span> webpack</span><br><span class="line">  <span class="comment">// 默认指定为 public 目录</span></span><br><span class="line">  <span class="attr">static</span>: &#123; <span class="comment">//false</span></span><br><span class="line">    <span class="attr">directory</span>: path.join(__dirname, <span class="string">&#x27;assets&#x27;</span>),</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;/index.html&#x27;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 防止 webpack 解析这些文件 </span></span><br><span class="line">  <span class="comment">// 这些文件内不能含有 import require define</span></span><br><span class="line">  <span class="comment">// 可以提高性能</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">noParse</span>: <span class="regexp">/jquery|lodash/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span></span><br><span class="line">        <span class="comment">// 排除 node_modules 下的js文件</span></span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">// 只检查 src 下的js文件</span></span><br><span class="line">        include: resolve(__dirname, <span class="string">&#x27;scr&#x27;</span>),</span><br><span class="line">        <span class="comment">// pre:优先执行 post:延后执行</span></span><br><span class="line">        <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123; &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 当规则匹配时 只使用第一个成功的匹配规则</span></span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            </span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">       &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="oneOf"><a href="#oneOf" class="headerlink" title="oneOf"></a>oneOf</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当规则匹配时 只使用第一个成功的匹配规则</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">module</span>:&#123;</span><br><span class="line">    <span class="attr">rules</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">oneOf</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">                <span class="attr">outputPath</span>: <span class="string">&#x27;imgs&#x27;</span>,</span><br><span class="line">                <span class="attr">esModule</span>: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">           &#125;,</span><br><span class="line">           &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">exclude</span>: <span class="regexp">/\.(js|css|less|html|jpg|png|gif)/</span>,</span><br><span class="line">              loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">outputPath</span>: <span class="string">&#x27;media&#x27;</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/components&#x27;</span>:</span><br><span class="line">       path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/components&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/utils&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/utils&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/services&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/services&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/models&#x27;</span>: </span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/models&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;@/pages&#x27;</span>:</span><br><span class="line">      path.resolve(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/pages&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="extensions-modules"><a href="#extensions-modules" class="headerlink" title="extensions modules"></a>extensions modules</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>,<span class="string">&#x27;.json&#x27;</span>,<span class="string">&#x27;.jsx&#x27;</span>,<span class="string">&#x27;.css&#x27;</span>]</span><br><span class="line">    <span class="comment">// 告诉 webpack 解析模块去找那个目录</span></span><br><span class="line">    <span class="attr">modules</span>: [</span><br><span class="line">      resolve(__dirname, <span class="string">&#x27;../../node_modules&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;node_modules&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    </span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a>externals</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拒绝 jqery 被打包</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">      <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">     &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h3><h4 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 node_modules 中代码打包进一个 chunk </span></span><br><span class="line"><span class="comment">// 自动分析多入口 chunk 有没有公共文件 有的话会打包成单独一个 chunk</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;all async&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a>devtool</h3><h4 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;cheap-module-source-map&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line">source-map: 一种 提供源代码到构建后代码映射 技术 （如果构建后代码出错了，通过映射可以追踪源代码错误）</span><br><span class="line">  </span><br><span class="line">[inline-|hidden-|<span class="built_in">eval</span>-][nosources-][cheap-[<span class="built_in">module</span>-]]source-map</span><br><span class="line">  </span><br><span class="line">      source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      inline-source-map：内联</span><br><span class="line">        只生成一个内联source-map</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      hidden-source-map：外部</span><br><span class="line">        错误代码错误原因，但是没有错误位置</span><br><span class="line">        不能追踪源代码错误，只能提示到构建后代码的错误位置</span><br><span class="line">      <span class="built_in">eval</span>-source-map：内联</span><br><span class="line">        每一个文件都生成对应的source-map，都在<span class="built_in">eval</span></span><br><span class="line">        错误代码准确信息 和 源代码的错误位置</span><br><span class="line">      nosources-source-map：外部</span><br><span class="line">        错误代码准确信息, 但是没有任何源代码信息</span><br><span class="line">      cheap-source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置 </span><br><span class="line">        只能精确的行</span><br><span class="line">      cheap-<span class="built_in">module</span>-source-map：外部</span><br><span class="line">        错误代码准确信息 和 源代码的错误位置 </span><br><span class="line">        <span class="built_in">module</span>会将loader的source map加入</span><br><span class="line">  </span><br><span class="line">    内联 和 外部的区别：<span class="number">1.</span> 外部生成了文件，内联没有 <span class="number">2.</span> 内联构建速度更快</span><br><span class="line">  </span><br><span class="line">      开发环境：速度快，调试更友好</span><br><span class="line">        速度快(<span class="built_in">eval</span>&gt;inline&gt;cheap&gt;...)</span><br><span class="line">          <span class="built_in">eval</span>-cheap-souce-map</span><br><span class="line">          <span class="built_in">eval</span>-source-map</span><br><span class="line">        调试更友好  </span><br><span class="line">          souce-map</span><br><span class="line">          cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">          cheap-souce-map</span><br><span class="line">  </span><br><span class="line">        --&gt; <span class="built_in">eval</span>-source-map  / <span class="built_in">eval</span>-cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">  </span><br><span class="line">      生产环境：源代码要不要隐藏? 调试要不要更友好</span><br><span class="line">        内联会让代码体积变大，所以在生产环境不用内联</span><br><span class="line">        nosources-source-map 全部隐藏</span><br><span class="line">        hidden-source-map 只隐藏源代码，会提示构建后代码错误信息</span><br><span class="line">  </span><br><span class="line">        --&gt; source-map / cheap-<span class="built_in">module</span>-souce-map</span><br><span class="line">                                    </span><br></pre></td></tr></table></figure>



<h2 id="4-demo"><a href="#4-demo" class="headerlink" title="4. demo"></a>4. demo</h2><h3 id="css抽离"><a href="#css抽离" class="headerlink" title="css抽离"></a>css抽离</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">   <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">     <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">     <span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span></span><br><span class="line">   &#125;),</span><br><span class="line">   <span class="comment">// 压缩css</span></span><br><span class="line">   <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">  &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [ <span class="string">&#x27;file-loader&#x27;</span>]</span><br><span class="line">             [<span class="string">&#x27;file-loader?name=[name].bundle[hash].css&#x27;</span>]</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<h3 id="js抽离"><a href="#js抽离" class="headerlink" title="js抽离"></a>js抽离</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">   <span class="attr">filename</span>: <span class="string">&#x27;js/[name].js&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="js语法检查"><a href="#js语法检查" class="headerlink" title="js语法检查"></a>js语法检查</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">eslint eslint-loader</span><br><span class="line">package.json 中添加</span><br><span class="line"><span class="comment">// 排除第三方库 只检查自己的代码</span></span><br><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123; <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span>&#125;</span><br><span class="line">#</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="comment">// 自动修复eslint的错误</span></span><br><span class="line">        <span class="attr">fix</span>: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码切割"><a href="#代码切割" class="headerlink" title="代码切割"></a>代码切割</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 多入口 自动打包多个文件</span><br><span class="line">   <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;jquery&#x27;</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;angular&#x27;</span>: <span class="string">&#x27;./src/2.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">2.</span> 异部的chunk</span><br><span class="line">   <span class="built_in">require</span>.ensure([],<span class="function"><span class="keyword">function</span>(<span class="params">_require</span>)</span>&#123;</span><br><span class="line">     _require(<span class="string">&#x27;./xxx&#x27;</span>)</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./2.css&#x27;</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"># </span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">  <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#</span><br><span class="line"><span class="attr">externals</span>: &#123;</span><br><span class="line">  <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cdn</span><br></pre></td></tr></table></figure>

<h3 id="dll"><a href="#dll" class="headerlink" title="dll"></a>dll</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line">硬链接一个 包,再手动scrit引入这个包 之后webpack就不用编译了</span><br><span class="line">#</span><br><span class="line">yarn add add-asset-html-webpack-plugin</span><br><span class="line">webpack --config webpack.config.dll.js &amp;&amp; webpack</span><br><span class="line"># 文件路径</span><br><span class="line">  webpack.config.js</span><br><span class="line">  webpack.config.dll.js</span><br><span class="line">  dist</span><br><span class="line">     index.html    </span><br><span class="line">  src</span><br><span class="line">  public</span><br><span class="line">  dll</span><br><span class="line">     jquery</span><br><span class="line">     manifest.json</span><br><span class="line"># webpack.config.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.export = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">      <span class="attr">minify</span>: &#123; <span class="attr">removeComments</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变~</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        <span class="attr">manifest</span>: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 将某个文件打包输出去，并在html中自动引入该资源</span></span><br><span class="line">    <span class="keyword">new</span> AddAssetHtmlPlugin(&#123;</span><br><span class="line">       <span class="attr">filepath</span>: path.resolve(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">       <span class="attr">publicPath</span>: <span class="string">&#x27;../dll&#x27;</span>,</span><br><span class="line">       <span class="attr">outputPath</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"># webpack.config.dll.js</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&#x27;[name]_[hash]&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 打包生成一个 manifest.json --&gt; 提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 映射库的暴露的内容名称 和 library 相同</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: path.join(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&#x27;jQuery&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">   <span class="attr">$</span>: path.resolve(path.join(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>))</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的常用命令</title>
    <url>/eternallycyf/Git%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p><code>Git</code>是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，<code>Git</code>擅长的是程序代码的版本化管理，对程序源代码进行差异化的版本管理，代码库占极少的空间，可以说<code>Git</code>是目前世界上最先进的分布式版本控制系统。</p>
<h2 id="工作位置"><a href="#工作位置" class="headerlink" title="工作位置"></a>工作位置</h2><ul>
<li><code>Workspace</code>：工作区。</li>
<li><code>Index/Stage</code>：暂存区。</li>
<li><code>Repository</code>：本地仓库。</li>
<li><code>Remote</code>：远程仓库。</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul>
<li><code>git config --list</code>: 显示当前的<code>Git</code>配置。</li>
<li><code>git config -e [--global]</code>: 编辑<code>Git</code>配置文件。</li>
<li><code>git config [--global] user.name &quot;[name]&quot;</code>: 以<code>name</code>为例配置单个属性。</li>
</ul>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li><code>git clone ssh://user@domain.com:22/resources.git</code>: 克隆远程仓库。</li>
<li><code>git init</code>: 初始化本地<code>git</code>仓库，新建仓库，通常使用<code>--bare</code>选项初始化远程仓库。</li>
</ul>
<h2 id="增加或删除文件"><a href="#增加或删除文件" class="headerlink" title="增加或删除文件"></a>增加或删除文件</h2><ul>
<li><code>git add [file1] [file2] ...</code>: 添加指定文件到暂存区。</li>
<li><code>git add [dir]</code>: 添加指定目录到暂存区，包括子目录。</li>
<li><code>git add .</code>: 添加当前目录的所有文件到暂存区。</li>
<li><code>git add -p</code>: 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交。</li>
<li><code>git rm [file1] [file2] ...</code>: 删除工作区文件，并且将这次删除放入暂存区。</li>
<li><code>git rm --cached [file]</code>: 从暂存区删除文件，工作区则不做出改变。</li>
<li><code>git mv [file-original] [file-renamed]</code>: 改名文件，并且将这个改名放入暂存区。</li>
</ul>
<h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><ul>
<li><code>git commit -m [message]</code>: 提交暂存区到仓库区。</li>
<li><code>git commit [file1] [file2] ... -m [message]</code>: 提交暂存区的指定文件到仓库区。</li>
<li><code>git commit -a</code>: 提交工作区自上次<code>commit</code>之后的变化，直接到仓库区。</li>
<li><code>git commit -v</code>: 提交时显示所有<code>diff</code>信息。</li>
<li><code>git commit --amend -m [message]</code>: 用一次新的<code>commit</code>，替代上一次提交，如果代码没有任何新变化，则用来改写上一次<code>commit</code>的提交信息。</li>
<li><code>git commit --amend [file1] [file2] ...</code>: 重做上一次<code>commit</code>，并包括指定文件的新变化。</li>
</ul>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li><code>git branch</code>: 列出所有本地分支。</li>
<li><code>git branch -r</code>: 列出所有远程分支。</li>
<li><code>git branch -a</code>: 列出所有本地分支和远程分支。</li>
<li><code>git branch [branch-name]</code>: 新建一个分支，但依然停留在当前分支。</li>
<li><code>git checkout -b [branch]</code>: 新建一个分支，并切换到该分支。</li>
<li><code>git branch [branch] [commit]</code>: 新建一个分支，指向指定<code>commit</code>。</li>
<li><code>git branch --track [branch] [remote-branch]</code>: 新建一个分支，与指定的远程分支建立追踪关系。</li>
<li><code>git checkout [branch-name]</code>: 切换到指定分支，并更新工作区。</li>
<li><code>git checkout -</code>: 切换到上一个分支。</li>
<li><code>git branch --set-upstream [branch] [remote-branch]</code>: 建立追踪关系，在现有分支与指定的远程分支之间。</li>
<li><code>git merge [branch]</code>: 合并指定分支到当前分支。</li>
<li><code>git cherry-pick [commit]</code>: 择一个<code>commit</code>，合并进当前分支。</li>
<li><code>git branch -d [branch-name]</code>: 删除分支。</li>
<li><code>git push origin --delete [branch-name]</code>: 删除远程分支。</li>
</ul>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul>
<li><code>git tag</code>: 列出所有<code>tag</code>。</li>
<li><code>git tag [tag]</code>: 新建一个<code>tag</code>在当前<code>commit</code>。</li>
<li><code>git tag [tag] [commit]</code>: 新建一个<code>tag</code>在指定<code>commit</code>。</li>
<li><code>git tag -d [tag]</code>: 删除本地<code>tag</code>。</li>
<li><code>git push origin :refs/tags/[tagName]</code>: 删除远程<code>tag</code>。</li>
<li><code>git show [tag]</code>: 查看<code>tag</code>信息。</li>
<li><code>git push [remote] [tag]</code>: 提交指定<code>tag</code>。</li>
<li><code>git push [remote] --tags</code>: 提交所有<code>tag</code>。</li>
<li><code>git checkout -b [branch] [tag]</code>: 新建一个分支，指向某个<code>tag</code>。</li>
</ul>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><ul>
<li><code>git status</code>: 显示有变更的文件。</li>
<li><code>git log</code>: 显示当前分支的版本历史。</li>
<li><code>git log --stat</code>: 显示<code>commit</code>历史，以及每次<code>commit</code>发生变更的文件。</li>
<li><code>git log -S [keyword]</code>: 搜索提交历史，根据关键。</li>
<li><code>git log [tag] HEAD --pretty=format:%s</code>: 显示某个<code>commit</code>之后的所有变动，每个<code>commit</code>占据一行。</li>
<li><code>git log [tag] HEAD --grep feature</code>: 显示某个<code>commit</code>之后的所有变动，其提交说明必须符合搜索条件。</li>
<li><code>git log --follow [file]</code>: 显示某个文件的版本历史，包括文件改名。</li>
<li><code>git log -p [file]</code>: 显示指定文件相关的每一次<code>diff</code>。</li>
<li><code>git log -5 --pretty --oneline</code>: 显示过去<code>5</code>次提交。</li>
<li><code>git shortlog -sn</code>: 显示所有提交过的用户，按提交次数排序。</li>
<li><code>git blame [file]</code>: 显示指定文件是什么人在什么时间修改过。</li>
<li><code>git diff</code>: 显示暂存区和工作区的差异。</li>
<li><code>git diff --cached [file]</code>: 显示暂存区和上一个<code>commit</code>的差异。</li>
<li><code>git diff HEAD</code>: 显示工作区与当前分支最新<code>commit</code>之间的差异。</li>
<li><code>git diff [first-branch]...[second-branch]</code>: 显示两次提交之间的差异。</li>
<li><code>git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</code>: 显示今天你写了多少行代码。</li>
<li><code>git show [commit]</code>: 显示某次提交的元数据和内容变化。</li>
<li><code>git show --name-only [commit]</code>: 显示某次提交发生变化的文件。</li>
<li><code>git show [commit]:[filename]</code>: 显示某次提交时，某个文件的内容。</li>
<li><code>git reflog</code>: 显示当前分支的最近几次提交。</li>
</ul>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul>
<li><code>git checkout [file]</code>: 恢复暂存区的指定文件到工作区。</li>
<li><code>git checkout [commit] [file]</code>: 恢复某个<code>commit</code>的指定文件到暂存区和工作区。</li>
<li><code>git checkout .</code>: 恢复暂存区的所有文件到工作区。</li>
<li><code>git reset [file]</code>: 重置暂存区的指定文件，与上一次<code>commit</code>保持一致，但工作区不变。</li>
<li><code>git reset --hard</code>: 重置暂存区与工作区，与上一次<code>commit</code>保持一致。</li>
<li><code>git reset [commit]</code>: 重置当前分支的指针为指定<code>commit</code>，同时重置暂存区，但工作区不变。</li>
<li><code>git reset --hard [commit]</code>: 重置当前分支的<code>HEAD</code>为指定<code>commit</code>，同时重置暂存区和工作区，与指定<code>commit</code>一致。</li>
<li><code>git reset --keep [commit]</code>: 重置当前<code>HEAD</code>为指定<code>commit</code>，但保持暂存区和工作区不变</li>
<li><code>git revert [commit]</code>: 新建一个<code>commit</code>，用来撤销指定<code>commit</code>，后者的所有变化都将被前者抵消，并且应用到当前分支。</li>
<li><code>git stash</code>、<code>git stash pop</code>: 暂时将未提交的变化移除，稍后再移入。</li>
<li><code>git reset --soft HEAD^</code>: 撤回<code>commit</code>操作，保留之前<code>commit</code>的代码。</li>
</ul>
<h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><ul>
<li><code>git fetch [remote]</code>: 下载远程仓库的所有变动。</li>
<li><code>git remote -v</code>: 显示所有远程仓库。</li>
<li><code>git remote show [remote]</code>: 显示某个远程仓库的信息。</li>
<li><code>git remote add [shortname] [url]</code>: 增加一个新的远程仓库，并命名。</li>
<li><code>git pull [remote] [branch]</code>: 取回远程仓库的变化，并与本地分支合并。</li>
<li><code>git push [remote] [branch]</code>: 上传本地指定分支到远程仓库。</li>
<li><code>git push [remote] --force</code>: 强行推送当前分支到远程仓库，即使有冲突。</li>
<li><code>git push [remote] --all</code>: 推送所有分支到远程仓库。</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域的解决方案</title>
    <url>/eternallycyf/%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="跨域的四种解决方案"><a href="#跨域的四种解决方案" class="headerlink" title="跨域的四种解决方案"></a>跨域的四种解决方案</h1><ul>
<li>什么是同源<ul>
<li>如果两个页面的协议域名和端口都相同 则两个页面具有相同的源</li>
</ul>
</li>
<li>同源策略<ul>
<li>如果不是同源就会跨域 如果请求不进行处理就会报错 <code>Access-control-Allow-xxx</code></li>
<li>如果同源  才会传给<code>AJAX</code>的<code>success</code>函数</li>
<li>跨域可以发送出去 服务器可以接收 但是会丢掉数据 不给信息</li>
</ul>
</li>
</ul>
<h2 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP"></a>1. JSONP</h2><ul>
<li>直接通过<code>script</code>标签的<code>src</code>属性获取<ul>
<li><code>script</code> 导入的文件会立即执行 </li>
<li>注意 引入的 <code>script</code> 标签要在函数定义的后面</li>
</ul>
</li>
<li>缺点是只能是<code>GET</code>请求<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># aaa.js  <span class="comment">// 可以服务器上触发,这里本地测试</span></span><br><span class="line">aaa(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;)</span><br><span class="line"># index.html</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// &#123;name: &#x27;zs&#x27;, age: 10&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;aaa.js?callback=aaa&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2.CORS"></a>2.CORS</h2><ul>
<li>支持 <code>GET</code> 和 <code>POST</code> ,不兼容<code>IE</code></li>
<li>服务端在响应数据给浏览器的时候 ,在响应头添加一些字段,浏览器就会允许跨域了</li>
<li>例如 <code>nodejs</code>的 <code>express</code>框架的 <code>CORS</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//express</span></span><br><span class="line">app.all(<span class="string">&#x27;*&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, GET, POST, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;X-Requested-With&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">  res.header(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;mytoken&#x27;</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3-Nginx转发"><a href="#3-Nginx转发" class="headerlink" title="3.Nginx转发"></a>3.Nginx转发</h2><ul>
<li>一般直接在服务器上配置,将请求直接转发到同源的地方就不会跨域了<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//www.cnblogs.com/ysocean/p/9392908.html</span></span><br><span class="line">server&#123;</span><br><span class="line">   <span class="comment">//监听9099端口</span></span><br><span class="line">    listen <span class="number">9099</span>;</span><br><span class="line">    <span class="comment">// 本地的域名是localhost</span></span><br><span class="line">    server_name localhost;</span><br><span class="line">    <span class="comment">//凡是localhost:9099/api这个样子的，都转发到真正的服务端地址http://baidu.com</span></span><br><span class="line">    location ^~ /api &#123;</span><br><span class="line">        proxy_pass http:<span class="comment">//baidu.com;</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-本地反向代理"><a href="#4-本地反向代理" class="headerlink" title="4.本地反向代理"></a>4.本地反向代理</h2><ul>
<li>本地开发阶段才能使用<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https 需要配置 secure headers(这个就是target的地址)</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://xxx.com&#x27;</span>, </span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// pathRewrite: &#123;&#x27;^/api&#x27;: &#x27;&#x27;&#125;   // 如果后端的请求路径也有 api  就需要重写</span></span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="attr">Referer</span>: <span class="string">&#x27;https://xxx.com&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>browser</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title>前端框架响应式原理-手写响应式</title>
    <url>/eternallycyf/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86-%E6%89%8B%E5%86%99%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h2><ul>
<li>大家都知道前端的三大框架是具有响应式的。但是其实他们内部实现的原理却是不一样的</li>
<li>这里就将手写各大前端框架的响应性 <code>demo</code><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">react =&gt; 一个函数重写 onChange 和 value</span><br><span class="line"><span class="comment">// &lt;input </span></span><br><span class="line"><span class="comment">//   value=&quot;state.xxx&quot; </span></span><br><span class="line"><span class="comment">//   onchange=&quot;()=&gt;&#123; setState(xxx)&#125;&quot;</span></span><br><span class="line"><span class="comment">// /&gt;</span></span><br><span class="line">vue =&gt; object.definedProperty =&gt; proxy</span><br><span class="line">anguluar =&gt; 脏数据 检测所有的数据 拦截</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h3><h4 id="object-definedProperty"><a href="#object-definedProperty" class="headerlink" title="object.definedProperty"></a>object.definedProperty</h4><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><ul>
<li><code>object.definedProperty</code>是<code>js ES6</code>的<code>API</code></li>
<li>提供了对于对象的拦截处理的能力<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;foo&#x27;</span>,&#123;</span><br><span class="line">  	<span class="attr">value</span>: </span><br><span class="line">  	<span class="comment">// 不允许重复定义</span></span><br><span class="line">  	configurable:<span class="literal">false</span>,</span><br><span class="line">  	<span class="comment">// 不允许迭代</span></span><br><span class="line">  	<span class="attr">enumerable</span>: fasle,</span><br><span class="line">  	<span class="comment">// 不允许重复赋值</span></span><br><span class="line">  	<span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  	<span class="attr">get</span>:</span><br><span class="line">  	set:</span><br><span class="line">&#125;)</span><br><span class="line">#</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj,&#123;</span><br><span class="line">  <span class="attr">foo</span>:&#123;</span><br><span class="line">    <span class="attr">value</span>:</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> internalValue = obj[key]</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`get<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;internalValue&#125;</span>`</span>);</span><br><span class="line">          <span class="keyword">return</span> internalValue;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">newValue</span>)</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`get<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;internalValue&#125;</span>`</span>);</span><br><span class="line">          internalValue = newValue</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">sads</span>: <span class="number">2</span> &#125;</span><br><span class="line">  convert(obj)</span><br><span class="line">  <span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="订阅者模式"><a href="#订阅者模式" class="headerlink" title="订阅者模式"></a>订阅者模式</h4><h5 id="依赖跟踪"><a href="#依赖跟踪" class="headerlink" title="依赖跟踪"></a>依赖跟踪</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// depend notify:当依赖更改的时候重新执行</span></span><br><span class="line"><span class="comment">// 当调用 dep.notify() 就重新执行</span></span><br><span class="line"><span class="comment">// () =&gt; &#123; dep.depend() console.log(&#x27;updated&#x27;) &#125;</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">depend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">          <span class="built_in">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> activeUpdate</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">autorun</span>(<span class="params">update</span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当依赖关系变化的时候 重新执行autoru内部的东西</span></span><br><span class="line">        activeUpdate = wrappedUpdate</span><br><span class="line">        update()</span><br><span class="line">        activeUpdate = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      dep.depend()</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;updated&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// should log: &quot;updated&quot;</span></span><br><span class="line"></span><br><span class="line">    dep.notify()</span><br><span class="line">    <span class="comment">// should log: &quot;updated&quot;</span></span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="observe"><a href="#observe" class="headerlink" title="observe"></a>observe</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span></span><br><span class="line">      &amp;&amp; !<span class="built_in">Array</span>.isArray(obj)</span><br><span class="line">      &amp;&amp; obj !== <span class="literal">null</span></span><br><span class="line">      &amp;&amp; obj !== <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isObject(obj)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> internalValue = obj[key]</span><br><span class="line">    <span class="keyword">let</span> dep = <span class="keyword">new</span> Dep()</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      get () &#123;</span><br><span class="line">        dep.depend()</span><br><span class="line">        <span class="keyword">return</span> internalValue</span><br><span class="line">      &#125;,</span><br><span class="line">      set (newValue) &#123;</span><br><span class="line">        <span class="keyword">const</span> isChanged = internalValue !== newValue</span><br><span class="line">        <span class="keyword">if</span> (isChanged) &#123;</span><br><span class="line">          internalValue = newValue</span><br><span class="line">          dep.notify()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.Dep = <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.subscribers = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  depend () &#123;</span><br><span class="line">    <span class="keyword">if</span> (activeUpdate) &#123;</span><br><span class="line">      <span class="comment">// register the current active update as a subscriber</span></span><br><span class="line">      <span class="built_in">this</span>.subscribers.add(activeUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify () &#123;</span><br><span class="line">    <span class="comment">// run all subscriber functions</span></span><br><span class="line">    <span class="built_in">this</span>.subscribers.forEach(<span class="function"><span class="params">subscriber</span> =&gt;</span> subscriber())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> activeUpdate</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">autorun</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">wrappedUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    activeUpdate = wrappedUpdate</span><br><span class="line">    update()</span><br><span class="line">    activeUpdate = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  wrappedUpdate()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">observe(state)</span><br><span class="line">autorun(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(state.count)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// should immediately log &quot;count is: 0&quot;</span></span><br><span class="line">state.count++</span><br><span class="line"><span class="comment">// should log &quot;count is: 1&quot;</span></span><br></pre></td></tr></table></figure>


<h4 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h4><ul>
<li>未完待续</li>
</ul>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul>
<li>未完待续</li>
</ul>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><ul>
<li>未完待续</li>
</ul>
]]></content>
      <categories>
        <category>soundCode</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>React</tag>
        <tag>Angular</tag>
        <tag>soundCode</tag>
      </tags>
  </entry>
  <entry>
    <title>js中的小技巧</title>
    <url>/eternallycyf/js%E4%B8%AD%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title="~~"></a>~~</h2><ul>
<li>用于数字取整</li>
<li>undefined null NaN 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(~~(<span class="number">11.11</span>));     <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="amp"><a href="#amp" class="headerlink" title="&amp;"></a>&amp;</h2><ul>
<li>判断奇偶</li>
<li>undefined null NaN “” 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span> &amp; <span class="number">1</span>);    <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">8</span> &amp; <span class="number">1</span>) ;   <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="-1"><a href="#-1" class="headerlink" title="!!"></a>!!</h2><ul>
<li>转换布尔值</li>
<li>undefined null NaN 0 “”都会变成 false</li>
<li>[] {} 会变成 true<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!!<span class="number">7</span>);               <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!![]);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!&#123;&#125;);              <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">null</span>);            <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(!!<span class="literal">undefined</span>);       <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="gt-gt"><a href="#gt-gt" class="headerlink" title="&gt;&gt;"></a>&gt;&gt;</h2><ul>
<li>左位移一等于乘二</li>
<li>右位移一等于除二</li>
<li>undefined null NaN “” 都会变成 0<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &gt;&gt; <span class="number">1</span>);      <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">16</span> &lt;&lt; <span class="number">1</span>);      <span class="comment">// 32</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>];</span><br><span class="line">arr.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// []</span></span><br></pre></td></tr></table></figure>

<h2 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> | <span class="built_in">Math</span>.random() * <span class="number">100</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span> % <span class="number">100</span> <span class="comment">//两位随机数</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span> % <span class="number">1000</span> <span class="comment">//三位随机数</span></span><br></pre></td></tr></table></figure>

<h2 id="生成随机字符串"><a href="#生成随机字符串" class="headerlink" title="生成随机字符串"></a>生成随机字符串</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// .substring() 的第二个参数控制取多少位 (最多可取13位)</span></span><br><span class="line"><span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substring(<span class="number">2</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure>

<h2 id="创建链接"><a href="#创建链接" class="headerlink" title="创建链接"></a>创建链接</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Google&quot;</span>.link(<span class="string">&quot;www.google.com&quot;</span>)); <span class="comment">// &lt;a href=&quot;www.google.com&quot;&gt;Google&lt;/a&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="快速判断IE8以下的浏览器"><a href="#快速判断IE8以下的浏览器" class="headerlink" title="快速判断IE8以下的浏览器"></a>快速判断IE8以下的浏览器</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isIE8 = !+<span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isIE8); <span class="comment">// false // Chrome 87</span></span><br></pre></td></tr></table></figure>

<h2 id="正确处理异常的方法"><a href="#正确处理异常的方法" class="headerlink" title="正确处理异常的方法"></a>正确处理异常的方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// something</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location.href = <span class="string">&quot;http://stackoverflow.com/search?q=[js]+&quot;</span> +  e.message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/150556186">https://zhuanlan.zhihu.com/p/150556186</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/262533240">https://zhuanlan.zhihu.com/p/262533240</a></li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>链表逆序两数相加</title>
    <url>/eternallycyf/%E9%93%BE%E8%A1%A8%E9%80%86%E5%BA%8F%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</li>
<li>请你将两个数相加，并以相同形式返回一个表示和的链表。</li>
<li>你可以假设除了数字 0 之外，这两个数都不会以 0 开头</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 虚拟头结点（构建新链表时的常用技巧）</span></span><br><span class="line">  <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 指针 p 负责构建新链表</span></span><br><span class="line">  <span class="keyword">let</span> p = dummy;</span><br><span class="line">  <span class="comment">// 记录进位</span></span><br><span class="line">  <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 开始执行加法，两条链表走完且没有进位时才能结束循环</span></span><br><span class="line">  <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 先加上上次的进位</span></span><br><span class="line">    <span class="keyword">let</span> val = carry;</span><br><span class="line">    <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l1.val;</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">      val += l2.val;</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理进位情况</span></span><br><span class="line">    carry = <span class="built_in">Math</span>.floor(val / <span class="number">10</span>);</span><br><span class="line">    val = val % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">// 构建新节点</span></span><br><span class="line">    p.next = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">    p = p.next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果链表的头结点（去除虚拟头结点）</span></span><br><span class="line">  <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/add-two-numbers/">两数相加</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>拿硬币</title>
    <url>/eternallycyf/%E6%8B%BF%E7%A1%AC%E5%B8%81/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>桌上有 <code>n</code> 堆力扣币，每堆的数量保存在数组 <code>coins</code> 中。我们每次可以选择任意一堆，</li>
<li>拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。<ul>
<li>例如: <code>[4,2,1] =&gt; 4</code></li>
<li><code>[2,3,10] =&gt; 8</code></li>
</ul>
</li>
<li>思路也很简单 <ul>
<li>当某堆硬币数<code>coin</code>是偶数时，拿取次数最少为<code>coin/2</code>次;</li>
<li>当某堆硬币数<code>coin</code>是奇数时，拿取次数最少为<code>coin/2 + 1</code>次;</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(coin % <span class="number">2</span> == <span class="number">0</span>) </span><br><span class="line">    count = coin / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    count = coin / <span class="number">2</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="2-1-reduce"><a href="#2-1-reduce" class="headerlink" title="2.1 reduce"></a>2.1 reduce</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coins =  [<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>];</span><br><span class="line">coins[<span class="number">0</span>] = <span class="built_in">Math</span>.ceil(coins[<span class="number">0</span>]/<span class="number">2</span>)</span><br><span class="line">coins.reduce(<span class="function">(<span class="params">p, c</span>) =&gt;</span> p + <span class="built_in">Math</span>.ceil(c / <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-2-位运算"><a href="#2-2-位运算" class="headerlink" title="2.2 位运算"></a>2.2 位运算</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> coins = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> coins)&#123;</span><br><span class="line">  <span class="comment">// item/2并向上取整 + 如果是奇数要+1否则+0</span></span><br><span class="line">  count+=(item &gt;&gt; <span class="number">1</span>) + (item &amp; <span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(count)  <span class="comment">// 8 </span></span><br></pre></td></tr></table></figure>

<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li>LCP 06. 拿硬币(<a href="https://leetcode-cn.com/problems/na-ying-bi/">https://leetcode-cn.com/problems/na-ying-bi/</a>)</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>两数之和</title>
    <url>/eternallycyf/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    <content><![CDATA[<h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题"></a>1. 问题</h2><ul>
<li>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code></li>
<li>请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。<ul>
<li>例如 <code>nums = [2,7,11,15], target = 9,</code> 结果是: 返回 <code>[0, 1]</code></li>
</ul>
</li>
</ul>
<h2 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2. 解决方法"></a>2. 解决方法</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nums = [<span class="number">2</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">15</span>]</span><br><span class="line"><span class="keyword">const</span> target = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> diff = target - nums[i]</span><br><span class="line">  <span class="keyword">if</span>(hash.has(diff))&#123;</span><br><span class="line">    <span class="keyword">return</span> [hash.get(diff),i]</span><br><span class="line">  &#125;</span><br><span class="line">  hash.set(nums[i],i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="3-题源"><a href="#3-题源" class="headerlink" title="3. 题源"></a>3. 题源</h2><ul>
<li><a href="https://leetcode-cn.com/problems/two-sum/">两数之和</a></li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>数组去重</title>
    <url>/eternallycyf/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</url>
    <content><![CDATA[<h2 id="1-解决方法"><a href="#1-解决方法" class="headerlink" title="1. 解决方法"></a>1. 解决方法</h2><h3 id="1-1-通过-Set"><a href="#1-1-通过-Set" class="headerlink" title="1.1 通过 Set"></a>1.1 通过 Set</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般工作中我都直接采用 set 进行集合运算 比较方便和容易理解</span></span><br><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">let</span> expectNumber = [...new <span class="built_in">Set</span>([...scores])].length <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="1-2-通过-filter"><a href="#1-2-通过-filter" class="headerlink" title="1.2 通过 filter"></a>1.2 通过 filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// 通过indexOf 让filter过滤掉多余的值</span></span><br><span class="line"><span class="keyword">let</span> expectNumber =scores.filter(<span class="function">(<span class="params">ele, index, arr</span>) =&gt;</span> arr.indexOf(ele)== index).length; <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h2 id="2-题源"><a href="#2-题源" class="headerlink" title="2. 题源:"></a>2. 题源:</h2><ul>
<li><a href="https://leetcode-cn.com/problems/qi-wang-ge-shu-tong-ji/">LCP 11.期望个数统一</a></li>
<li>看了半天没看懂题目是什么意思 。。于是回顾了下 数学期望值</li>
<li>数学期望(mean)（或均值，亦简称期望）是试验中每次可能结果的概率乘以其结果的总和</li>
<li>举个例子 一个骰子 他能摇出来的所有结果的总和 就是他的期望值<ul>
<li>即只可能是 <code>[1,2,3,4,5,6]</code></li>
<li>不可能为<code>[2.5,...]</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>css使用js中的变量var()</title>
    <url>/eternallycyf/css%E4%BD%BF%E7%94%A8js%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8Fvar()/</url>
    <content><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var()"></a>var()</h1><h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><ul>
<li>这篇文章所指的<code>css</code>变量, 并不是指 <code>less</code> 等预编译语言的变量<code>(@)</code></li>
<li>而是直接在 <code>.css</code> 页面中使用 <code>.js|.html</code> 中所定义的变量 (<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/var()">var()-mdn</a>)</li>
<li>一般情况下 前端样式只要通过 js动态切换不同类名 行内样式</li>
<li>就可以在<code>React Vue</code> 中完成绝大多数的需求了</li>
<li>但是有些使用场景就需要原生 <code>css</code> 的 <code>var()</code> 变量。 或者说使用他可以达到更加方便的效果<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设使用了一个组件库的一个小圆点, 而他内部是通过伪元素做的</span></span><br><span class="line"><span class="comment">// 此时的需求是 小圆点的颜色由用户决定,不是一个固定的值,你该如何控制呢?</span></span><br><span class="line"><span class="comment">// 我们通常的做法是 </span></span><br><span class="line"><span class="comment">//    1.定义不同的类名切换:  x =&gt; 颜色不是一个固定的值</span></span><br><span class="line"><span class="comment">//    2.行内样式直接传递:   x =&gt; 行内样式不能修改伪元素</span></span><br><span class="line"><span class="comment">//    3.自己重写:         x =&gt; 麻烦,这里只是一个用例,某些场景会极其繁琐</span></span><br><span class="line"><span class="comment">//    4.css in js       x =&gt; 公司项目一般不用这个 </span></span><br><span class="line"><span class="comment">//    5.dom操作          x =&gt; 不推荐</span></span><br><span class="line">这时候<span class="keyword">var</span>()就应运而生了</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="原生html"><a href="#原生html" class="headerlink" title="原生html"></a>原生html</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># index.html </span><br><span class="line">&lt;style&gt;</span><br><span class="line">  #dv &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="keyword">var</span>(--color);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">let</span> clickColor = <span class="string">&#x27;cornflowerblue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">const</span> dv = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;dv&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    dv.innerHTML = <span class="string">`&lt;div id=&#x27;dv&#x27; style=&quot;--color:<span class="subst">$&#123;myColor&#125;</span>&quot;&gt;css&lt;/div&gt;`</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="tsx"><a href="#tsx" class="headerlink" title="tsx"></a>tsx</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./app.module.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> clickColor = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> style = &#123; <span class="string">&quot;--color&quot;</span>: clickColor&#125; <span class="keyword">as</span> React.CSSProperties;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.header&#125;</span> <span class="attr">style</span>=<span class="string">&#123;style&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      hello</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br><span class="line">#</span><br><span class="line">.header &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="keyword">var</span>(--color)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;spanStyle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;--color:red&quot;</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	<span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		<span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">			<span class="attr">spanStyle</span>: &#123; <span class="string">&quot;--color&quot;</span>: <span class="string">&quot;green&quot;</span> &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">		&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">	&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.span1</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">	<span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


<h2 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># vue3提供了API 直接v-bind就可以使用了</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.span1 &#123;</span><br><span class="line">	<span class="attr">color</span>: v-bind(变量);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown</title>
    <url>/eternallycyf/markdown/</url>
    <content><![CDATA[<h2 id="markdown是什么"><a href="#markdown是什么" class="headerlink" title="markdown是什么"></a>markdown是什么</h2><ul>
<li>Markdown是一种轻量级标记语言</li>
<li>是程序员记笔记的基本工具</li>
<li>简单的语法就可以满足绝大多数记笔记的需求</li>
</ul>
<h2 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul>
<li>Markdown支持6种级别的标题，对应html标签 h1 ~ h6<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># h1</span></span><br><span class="line"><span class="section">## h2</span></span><br><span class="line"><span class="section">### h3</span></span><br><span class="line"><span class="section">#### h4</span></span><br><span class="line"><span class="section">##### h5</span></span><br><span class="line"><span class="section">###### h6</span></span><br></pre></td></tr></table></figure>
<h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6></li>
</ul>
<h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这段文字将被高亮显示...</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这段文字将被高亮显示…</p>
</blockquote>
<h3 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">点击跳转至百度</span>](<span class="link">http://www.baidu.com</span>)</span><br><span class="line">![<span class="string">图片</span>](<span class="link">https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</span>)</span><br></pre></td></tr></table></figure>
<p><a href="http://www.baidu.com/">点击跳转至百度</a><br><img src="https://upload-images.jianshu.io/upload_images/703764-605e3cc2ecb664f6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></p>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>无序列表使用*或+或-标识</li>
<li>有序列表使用数字加.标识，例如：1.<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> 黄瓜</span><br><span class="line"><span class="bullet">*</span> 玉米</span><br><span class="line"><span class="bullet">*</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 黄瓜</span><br><span class="line"><span class="bullet">+</span> 玉米</span><br><span class="line"><span class="bullet">+</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 黄瓜</span><br><span class="line"><span class="bullet">-</span> 玉米</span><br><span class="line"><span class="bullet">-</span> 茄子</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 黄瓜</span><br><span class="line"><span class="bullet">2.</span> 玉米</span><br><span class="line"><span class="bullet">3.</span> 茄子</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="section">---</span></span></span></span><br></pre></td></tr></table></figure>
<hr>
<hr>
<h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*这里是斜体*</span></span><br><span class="line"><span class="emphasis">_这里是斜体_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**这里是加粗**</span></span><br><span class="line"><span class="strong">__这里是加粗__</span></span><br></pre></td></tr></table></figure>
<p><em>这里是斜体</em><br><em>这里是斜体</em></p>
<p><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p>
<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><ul>
<li>使用两对反引号包裹<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```语言</span></span><br><span class="line"><span class="code">  代码</span></span><br></pre></td></tr></table></figure>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```markdown</span><br><span class="line">  代码</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">项目|项目一|项目二</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">表头</th>
<th align="center">条目一</th>
<th align="center">条目二</th>
</tr>
</thead>
<tbody><tr>
<td align="center">项目</td>
<td align="center">项目一</td>
<td align="center">项目二</td>
</tr>
</tbody></table>
<h3 id="自定义颜色"><a href="#自定义颜色" class="headerlink" title="自定义颜色"></a>自定义颜色</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">直接写 html 元素就可以了</span><br><span class="line">&lt;span style=<span class="string">&quot;color:green&quot;</span>&gt;green&lt;/span&gt;</span><br></pre></td></tr></table></figure>
<p><span style="color:green">green</span></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+/ 可以进入或退出源码模式</span><br><span class="line">此外 markdown还可以输入数学符号 流程图 等功能</span><br><span class="line">但是并不常用这里就不展开了 自己可以百度搜索试一试</span><br><span class="line">一般我是用做的图片直接放过来</span><br></pre></td></tr></table></figure>

<h2 id="推荐使用-Typora"><a href="#推荐使用-Typora" class="headerlink" title="推荐使用 Typora"></a>推荐使用 Typora</h2><ul>
<li><code>Typora</code> 是一个编写 <code>markdown</code> 的软件</li>
<li>比如表格这个还是比较繁琐的 使用 <code>Typora</code> 直接右键就可以插入表格了</li>
<li>其次 <code>Typora</code> 是用 <code>electron</code> 开发的</li>
<li>所以他里面的样式 都可以使用前端的方式随便修改<ul>
<li>设置里面 高级设置 开启调试默认 </li>
<li><code>F12</code> 就可以看到调试工具了</li>
<li>设置 - 外观 - 打开主题文件夹</li>
<li>在根目录新建一个 <code>base.user.css</code></li>
<li>然后编写自己想修改的样式就可以了 </li>
</ul>
</li>
</ul>
<h2 id="Markdown-Viewer"><a href="#Markdown-Viewer" class="headerlink" title="Markdown Viewer"></a>Markdown Viewer</h2><ul>
<li>直接用浏览器打开 <code>.md</code> 文件</li>
<li>为了方便查看 我一般直接浏览器打开<code>.md</code>文件</li>
<li>谷歌商店直接下载就行 注意要翻墙</li>
<li><a href="https://chrome.google.com/webstore/detail/markdown-viewer/ckkdlimhmcjmikdlpkmbgfkaikojcbjk?utm_source=chrome-ntp-icon">Markdown Viewer</a></li>
<li>然后 <code>chrome</code> 打开拓展程序的设置界面 找到 <code>Markdown Viewer</code></li>
<li>开启两项配置<ul>
<li>自动允许访问以下网站 =&gt; file:///*</li>
<li>允许访问文件网址 </li>
</ul>
</li>
<li>然后在 <code>chrome</code> 右上角点击 <code>Markdown Viewer</code>的图标<ul>
<li>自己设置下样式</li>
<li>除了 <code>compiler</code> 中的 <code>pedantic</code></li>
<li>其他全部勾选</li>
</ul>
</li>
<li>然后只要把 <code>.md</code>文件拖到 <code>chrome</code> 上就能直接预览了</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/eternallycyf/hello-world/</url>
    <content><![CDATA[<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* css */</span></span><br><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* javascript */</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* php */</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot; python &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* java */</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c */</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c++ */</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* C# */</span><br><span class="line">Console.WriteLine(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* golang */</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell <span class="comment">#</span></span></span><br><span class="line">echo &quot;Hello World&quot;;</span><br></pre></td></tr></table></figure>

<figure class="highlight vbscript"><table><tr><td class="code"><pre><span class="line">/* vbscript */</span><br><span class="line"><span class="built_in">MsgBox</span>(<span class="string">&quot;Hello,World!&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--[[ Lua ]]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
